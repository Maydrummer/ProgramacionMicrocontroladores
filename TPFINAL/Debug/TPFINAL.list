
TPFINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003114  08003114  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800311c  0800311c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000028  0800314c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  0800314c  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000977d  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b98  00000000  00000000  00029818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f9  00000000  00000000  0002bb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002127e  00000000  00000000  0002c181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b30e  00000000  00000000  0004d3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8155  00000000  00000000  0005870d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e48  00000000  00000000  00120864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  001226ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080030e4 	.word	0x080030e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	080030e4 	.word	0x080030e4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fbc5 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f81d 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART2_UART_Init();
 800050e:	f000 f889 	bl	8000624 <MX_USART2_UART_Init>
  keypad_init();
 8000512:	f000 f9d3 	bl	80008bc <keypad_init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, dataT, 12, HAL_MAX_DELAY);
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	220c      	movs	r2, #12
 800051c:	4908      	ldr	r1, [pc, #32]	; (8000540 <main+0x40>)
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x44>)
 8000520:	f001 fded 	bl	80020fe <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t caracter=keypad_read();
 8000524:	f000 fa2e 	bl	8000984 <keypad_read>
 8000528:	4603      	mov	r3, r0
 800052a:	70fb      	strb	r3, [r7, #3]
	  uint8_t *ptro=&caracter;
 800052c:	1cfb      	adds	r3, r7, #3
 800052e:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2,ptro , 1, HAL_MAX_DELAY);
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	2201      	movs	r2, #1
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <main+0x44>)
 800053a:	f001 fde0 	bl	80020fe <HAL_UART_Transmit>
  {
 800053e:	e7f1      	b.n	8000524 <main+0x24>
 8000540:	20000000 	.word	0x20000000
 8000544:	20000044 	.word	0x20000044

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2234      	movs	r2, #52	; 0x34
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fd98 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b2a      	ldr	r3, [pc, #168]	; (800061c <SystemClock_Config+0xd4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a29      	ldr	r2, [pc, #164]	; (800061c <SystemClock_Config+0xd4>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <SystemClock_Config+0xd4>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000594:	4a22      	ldr	r2, [pc, #136]	; (8000620 <SystemClock_Config+0xd8>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <SystemClock_Config+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005bc:	2310      	movs	r3, #16
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 faa6 	bl	8001b28 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005e2:	f000 f849 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2302      	movs	r3, #2
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f000 ff46 	bl	8001494 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800060e:	f000 f833 	bl	8000678 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART2_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800065c:	f001 fd02 	bl	8002064 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f807 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000044 	.word	0x20000044
 8000674:	40004400 	.word	0x40004400

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_MspInit+0x4c>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <HAL_MspInit+0x4c>)
 8000694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <HAL_MspInit+0x4c>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_MspInit+0x4c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006c2:	2007      	movs	r0, #7
 80006c4:	f000 fc4c 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800

080006d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a36      	ldr	r2, [pc, #216]	; (80007cc <HAL_UART_MspInit+0xf8>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d134      	bne.n	8000760 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a34      	ldr	r2, [pc, #208]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 8000700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a2d      	ldr	r2, [pc, #180]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800072e:	2303      	movs	r3, #3
 8000730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800073e:	2308      	movs	r3, #8
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4822      	ldr	r0, [pc, #136]	; (80007d4 <HAL_UART_MspInit+0x100>)
 800074a:	f000 fcdd 	bl	8001108 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2034      	movs	r0, #52	; 0x34
 8000754:	f000 fc0f 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000758:	2034      	movs	r0, #52	; 0x34
 800075a:	f000 fc28 	bl	8000fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800075e:	e030      	b.n	80007c2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <HAL_UART_MspInit+0x104>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12b      	bne.n	80007c2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_UART_MspInit+0xfc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a2:	230c      	movs	r3, #12
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b2:	2307      	movs	r3, #7
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <HAL_UART_MspInit+0x100>)
 80007be:	f000 fca3 	bl	8001108 <HAL_GPIO_Init>
}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	; 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40004c00 	.word	0x40004c00
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40004400 	.word	0x40004400

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 fa86 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <UART4_IRQHandler+0x10>)
 8000836:	f001 fcf5 	bl	8002224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000088 	.word	0x20000088

08000844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086e:	490e      	ldr	r1, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000884:	4c0b      	ldr	r4, [pc, #44]	; (80008b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000892:	f7ff ffd7 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000896:	f002 fc01 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fe31 	bl	8000500 <main>
  bx  lr    
 800089e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80008ac:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 80008b0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80008b4:	200000d0 	.word	0x200000d0

080008b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC_IRQHandler>
	...

080008bc <keypad_init>:
void F2_OFF(void);
void F3_OFF(void);
void F4_OFF(void);
//Funcion que inicia los GPIOs que se utilizaran para el manejo del teclado
void keypad_init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0}; //Creacion de variable tipo estructura para configurar los Gpio's
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE(); //Habilitacion del clock del bus que se conecta al puerto A
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b28      	ldr	r3, [pc, #160]	; (8000978 <keypad_init+0xbc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a27      	ldr	r2, [pc, #156]	; (8000978 <keypad_init+0xbc>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <keypad_init+0xbc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE(); //Habilitacion del clock del bus que se conecta al puerto B
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <keypad_init+0xbc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a20      	ldr	r2, [pc, #128]	; (8000978 <keypad_init+0xbc>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <keypad_init+0xbc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE(); //Habilitacion del clock del bus que se conecta al puerto C
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <keypad_init+0xbc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <keypad_init+0xbc>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <keypad_init+0xbc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

	//Configuracion como salida de los pines correspondientes a las filas
	//FI-Pb4,F2-PB5,F3_PB6,F4_PB7 OUTPUT
	GPIO_InitStruct.Pin = F1_Pin|F2_Pin|F3_Pin|F4_Pin;
 8000926:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800092a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PORT_F, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	480f      	ldr	r0, [pc, #60]	; (800097c <keypad_init+0xc0>)
 8000940:	f000 fbe2 	bl	8001108 <HAL_GPIO_Init>
	//Configuracion como entrada de los pines correspondientes a las columnas
	//C1-PA6,C2-PA7,C3-PA8,C4-PA9
	GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8000944:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000948:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PORT_C, &GPIO_InitStruct);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <keypad_init+0xc4>)
 800095a:	f000 fbd5 	bl	8001108 <HAL_GPIO_Init>
	//Iniciar con los GPIOs de las filas en estado low
	F1_OFF();
 800095e:	f000 f939 	bl	8000bd4 <F1_OFF>
	F2_OFF();
 8000962:	f000 f943 	bl	8000bec <F2_OFF>
	F3_OFF();
 8000966:	f000 f94d 	bl	8000c04 <F3_OFF>
	F4_OFF();
 800096a:	f000 f957 	bl	8000c1c <F4_OFF>
}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400
 8000980:	40020000 	.word	0x40020000

08000984 <keypad_read>:
//Funcion que retorna el caracter que se presiona en uint8_t
uint8_t keypad_read(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	uint8_t i=0;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 800098e:	2300      	movs	r3, #0
 8000990:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<n_filas;i++)
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	e0cd      	b.n	8000b34 <keypad_read+0x1b0>
	{
		if(i==0)//Barrido en fila 1
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d12f      	bne.n	80009fe <keypad_read+0x7a>
		{
			F1_OFF();
 800099e:	f000 f919 	bl	8000bd4 <F1_OFF>
			F2_ON();
 80009a2:	f000 f953 	bl	8000c4c <F2_ON>
			F3_ON();
 80009a6:	f000 f95d 	bl	8000c64 <F3_ON>
			F4_ON();
 80009aa:	f000 f967 	bl	8000c7c <F4_ON>
			HAL_Delay(10);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f000 f9e2 	bl	8000d78 <HAL_Delay>
			while ( !Read_COL1() ){caracter=letras[0][COL1];}	//caracter 1
 80009b4:	e002      	b.n	80009bc <keypad_read+0x38>
 80009b6:	4b64      	ldr	r3, [pc, #400]	; (8000b48 <keypad_read+0x1c4>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	71bb      	strb	r3, [r7, #6]
 80009bc:	f000 f8c6 	bl	8000b4c <Read_COL1>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f7      	beq.n	80009b6 <keypad_read+0x32>
			while ( !Read_COL2() ){caracter=letras[0][COL2];}	//caracter 2
 80009c6:	e002      	b.n	80009ce <keypad_read+0x4a>
 80009c8:	4b5f      	ldr	r3, [pc, #380]	; (8000b48 <keypad_read+0x1c4>)
 80009ca:	785b      	ldrb	r3, [r3, #1]
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	f000 f8cd 	bl	8000b6c <Read_COL2>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0f7      	beq.n	80009c8 <keypad_read+0x44>
			while ( !Read_COL3() ){caracter=letras[0][COL3];}	//caracter 3
 80009d8:	e002      	b.n	80009e0 <keypad_read+0x5c>
 80009da:	4b5b      	ldr	r3, [pc, #364]	; (8000b48 <keypad_read+0x1c4>)
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	71bb      	strb	r3, [r7, #6]
 80009e0:	f000 f8d4 	bl	8000b8c <Read_COL3>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f7      	beq.n	80009da <keypad_read+0x56>
			while ( !Read_COL4() ){caracter=letras[0][COL4];}	//caracter A
 80009ea:	e002      	b.n	80009f2 <keypad_read+0x6e>
 80009ec:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <keypad_read+0x1c4>)
 80009ee:	78db      	ldrb	r3, [r3, #3]
 80009f0:	71bb      	strb	r3, [r7, #6]
 80009f2:	f000 f8dd 	bl	8000bb0 <Read_COL4>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f7      	beq.n	80009ec <keypad_read+0x68>
 80009fc:	e097      	b.n	8000b2e <keypad_read+0x1aa>
		}
		else if(i==1)//Barrido en fila 2
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d12f      	bne.n	8000a64 <keypad_read+0xe0>
		{
			F2_OFF();
 8000a04:	f000 f8f2 	bl	8000bec <F2_OFF>
			F1_ON();
 8000a08:	f000 f914 	bl	8000c34 <F1_ON>
			F3_ON();
 8000a0c:	f000 f92a 	bl	8000c64 <F3_ON>
			F4_ON();
 8000a10:	f000 f934 	bl	8000c7c <F4_ON>
			HAL_Delay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f000 f9af 	bl	8000d78 <HAL_Delay>
			while ( !Read_COL1() ){caracter=letras[1][COL1];}	//caracter 4
 8000a1a:	e002      	b.n	8000a22 <keypad_read+0x9e>
 8000a1c:	4b4a      	ldr	r3, [pc, #296]	; (8000b48 <keypad_read+0x1c4>)
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	71bb      	strb	r3, [r7, #6]
 8000a22:	f000 f893 	bl	8000b4c <Read_COL1>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f7      	beq.n	8000a1c <keypad_read+0x98>
			while ( !Read_COL2() ){caracter=letras[1][COL2];}	//caracter 5
 8000a2c:	e002      	b.n	8000a34 <keypad_read+0xb0>
 8000a2e:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <keypad_read+0x1c4>)
 8000a30:	795b      	ldrb	r3, [r3, #5]
 8000a32:	71bb      	strb	r3, [r7, #6]
 8000a34:	f000 f89a 	bl	8000b6c <Read_COL2>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f7      	beq.n	8000a2e <keypad_read+0xaa>
			while ( !Read_COL3() ){caracter=letras[1][COL3];}	//caracter 6
 8000a3e:	e002      	b.n	8000a46 <keypad_read+0xc2>
 8000a40:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <keypad_read+0x1c4>)
 8000a42:	799b      	ldrb	r3, [r3, #6]
 8000a44:	71bb      	strb	r3, [r7, #6]
 8000a46:	f000 f8a1 	bl	8000b8c <Read_COL3>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f7      	beq.n	8000a40 <keypad_read+0xbc>
			while ( !Read_COL4() ){caracter=letras[1][COL4];}	//caracter B
 8000a50:	e002      	b.n	8000a58 <keypad_read+0xd4>
 8000a52:	4b3d      	ldr	r3, [pc, #244]	; (8000b48 <keypad_read+0x1c4>)
 8000a54:	79db      	ldrb	r3, [r3, #7]
 8000a56:	71bb      	strb	r3, [r7, #6]
 8000a58:	f000 f8aa 	bl	8000bb0 <Read_COL4>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f7      	beq.n	8000a52 <keypad_read+0xce>
 8000a62:	e064      	b.n	8000b2e <keypad_read+0x1aa>
			}
		else if(i==2)//Barrido en fila 3
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d12f      	bne.n	8000aca <keypad_read+0x146>
		{
			F3_OFF();
 8000a6a:	f000 f8cb 	bl	8000c04 <F3_OFF>
			F1_ON();
 8000a6e:	f000 f8e1 	bl	8000c34 <F1_ON>
			F2_ON();
 8000a72:	f000 f8eb 	bl	8000c4c <F2_ON>
			F4_ON();
 8000a76:	f000 f901 	bl	8000c7c <F4_ON>
			HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f000 f97c 	bl	8000d78 <HAL_Delay>
			while ( !Read_COL1() ){caracter=letras[2][COL1];}	//caracter 7
 8000a80:	e002      	b.n	8000a88 <keypad_read+0x104>
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <keypad_read+0x1c4>)
 8000a84:	7a1b      	ldrb	r3, [r3, #8]
 8000a86:	71bb      	strb	r3, [r7, #6]
 8000a88:	f000 f860 	bl	8000b4c <Read_COL1>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f7      	beq.n	8000a82 <keypad_read+0xfe>
			while ( !Read_COL2() ){caracter=letras[2][COL2];}	//caracter 8
 8000a92:	e002      	b.n	8000a9a <keypad_read+0x116>
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <keypad_read+0x1c4>)
 8000a96:	7a5b      	ldrb	r3, [r3, #9]
 8000a98:	71bb      	strb	r3, [r7, #6]
 8000a9a:	f000 f867 	bl	8000b6c <Read_COL2>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f7      	beq.n	8000a94 <keypad_read+0x110>
			while ( !Read_COL3() ){caracter=letras[2][COL3];}	//caracter 9
 8000aa4:	e002      	b.n	8000aac <keypad_read+0x128>
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <keypad_read+0x1c4>)
 8000aa8:	7a9b      	ldrb	r3, [r3, #10]
 8000aaa:	71bb      	strb	r3, [r7, #6]
 8000aac:	f000 f86e 	bl	8000b8c <Read_COL3>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0f7      	beq.n	8000aa6 <keypad_read+0x122>
			while ( !Read_COL4() ){caracter=letras[2][COL4];}	//caracter C
 8000ab6:	e002      	b.n	8000abe <keypad_read+0x13a>
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <keypad_read+0x1c4>)
 8000aba:	7adb      	ldrb	r3, [r3, #11]
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	f000 f877 	bl	8000bb0 <Read_COL4>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f7      	beq.n	8000ab8 <keypad_read+0x134>
 8000ac8:	e031      	b.n	8000b2e <keypad_read+0x1aa>
		}
		else if(i==3)//Barrido en fila 4
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d12e      	bne.n	8000b2e <keypad_read+0x1aa>
		{
			F4_OFF();
 8000ad0:	f000 f8a4 	bl	8000c1c <F4_OFF>
			F1_ON();
 8000ad4:	f000 f8ae 	bl	8000c34 <F1_ON>
			F2_ON();
 8000ad8:	f000 f8b8 	bl	8000c4c <F2_ON>
			F3_ON();
 8000adc:	f000 f8c2 	bl	8000c64 <F3_ON>
			HAL_Delay(10);
 8000ae0:	200a      	movs	r0, #10
 8000ae2:	f000 f949 	bl	8000d78 <HAL_Delay>
			while ( !Read_COL1() ){caracter=letras[3][COL1];}	//caracter *
 8000ae6:	e002      	b.n	8000aee <keypad_read+0x16a>
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <keypad_read+0x1c4>)
 8000aea:	7b1b      	ldrb	r3, [r3, #12]
 8000aec:	71bb      	strb	r3, [r7, #6]
 8000aee:	f000 f82d 	bl	8000b4c <Read_COL1>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0f7      	beq.n	8000ae8 <keypad_read+0x164>
			while ( !Read_COL2() ){caracter=letras[3][COL2];}	//caracter 0
 8000af8:	e002      	b.n	8000b00 <keypad_read+0x17c>
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <keypad_read+0x1c4>)
 8000afc:	7b5b      	ldrb	r3, [r3, #13]
 8000afe:	71bb      	strb	r3, [r7, #6]
 8000b00:	f000 f834 	bl	8000b6c <Read_COL2>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f7      	beq.n	8000afa <keypad_read+0x176>
			while ( !Read_COL3() ){caracter=letras[3][COL3];}	//caracter #
 8000b0a:	e002      	b.n	8000b12 <keypad_read+0x18e>
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <keypad_read+0x1c4>)
 8000b0e:	7b9b      	ldrb	r3, [r3, #14]
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	f000 f83b 	bl	8000b8c <Read_COL3>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f7      	beq.n	8000b0c <keypad_read+0x188>
			while ( !Read_COL4() ){caracter=letras[3][COL4];}	//caracter D
 8000b1c:	e002      	b.n	8000b24 <keypad_read+0x1a0>
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <keypad_read+0x1c4>)
 8000b20:	7bdb      	ldrb	r3, [r3, #15]
 8000b22:	71bb      	strb	r3, [r7, #6]
 8000b24:	f000 f844 	bl	8000bb0 <Read_COL4>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f7      	beq.n	8000b1e <keypad_read+0x19a>
	for(i=0;i<n_filas;i++)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	3301      	adds	r3, #1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	f67f af2e 	bls.w	8000998 <keypad_read+0x14>
		}
	}
	return caracter;
 8000b3c:	79bb      	ldrb	r3, [r7, #6]

}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000010 	.word	0x20000010

08000b4c <Read_COL1>:


//Desarrollo funciones de lectura

static uint8_t Read_COL1(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(PORT_C, C1_Pin)) ? 1 : 0;
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <Read_COL1+0x1c>)
 8000b54:	f000 fc6c 	bl	8001430 <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40020000 	.word	0x40020000

08000b6c <Read_COL2>:

static uint8_t Read_COL2(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(PORT_C, C2_Pin)) ? 1 : 0;
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <Read_COL2+0x1c>)
 8000b74:	f000 fc5c 	bl	8001430 <HAL_GPIO_ReadPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf14      	ite	ne
 8000b7e:	2301      	movne	r3, #1
 8000b80:	2300      	moveq	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020000 	.word	0x40020000

08000b8c <Read_COL3>:

static uint8_t Read_COL3(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(PORT_C, C3_Pin)) ? 1 : 0;
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <Read_COL3+0x20>)
 8000b96:	f000 fc4b 	bl	8001430 <HAL_GPIO_ReadPin>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bf14      	ite	ne
 8000ba0:	2301      	movne	r3, #1
 8000ba2:	2300      	moveq	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40020000 	.word	0x40020000

08000bb0 <Read_COL4>:

static uint8_t Read_COL4(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(PORT_C, C4_Pin)) ? 1 : 0;
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <Read_COL4+0x20>)
 8000bba:	f000 fc39 	bl	8001430 <HAL_GPIO_ReadPin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf14      	ite	ne
 8000bc4:	2301      	movne	r3, #1
 8000bc6:	2300      	moveq	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <F1_OFF>:

//Desarrollo funciones para apagar o encender una fila o columna
void F1_OFF(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F1_Pin , GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <F1_OFF+0x14>)
 8000bde:	f000 fc3f 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40020400 	.word	0x40020400

08000bec <F2_OFF>:

void F2_OFF(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F2_Pin , GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <F2_OFF+0x14>)
 8000bf6:	f000 fc33 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40020400 	.word	0x40020400

08000c04 <F3_OFF>:

void F3_OFF(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F3_Pin , GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2140      	movs	r1, #64	; 0x40
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <F3_OFF+0x14>)
 8000c0e:	f000 fc27 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020400 	.word	0x40020400

08000c1c <F4_OFF>:

void F4_OFF(void){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F4_Pin , GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c26:	4802      	ldr	r0, [pc, #8]	; (8000c30 <F4_OFF+0x14>)
 8000c28:	f000 fc1a 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40020400 	.word	0x40020400

08000c34 <F1_ON>:

void F1_ON(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F1_Pin , GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <F1_ON+0x14>)
 8000c3e:	f000 fc0f 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020400 	.word	0x40020400

08000c4c <F2_ON>:

void F2_ON(void){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F2_Pin , GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2120      	movs	r1, #32
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <F2_ON+0x14>)
 8000c56:	f000 fc03 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020400 	.word	0x40020400

08000c64 <F3_ON>:

void F3_ON(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F3_Pin , GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <F3_ON+0x14>)
 8000c6e:	f000 fbf7 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020400 	.word	0x40020400

08000c7c <F4_ON>:

void F4_ON(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F4_Pin , GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	4802      	ldr	r0, [pc, #8]	; (8000c90 <F4_ON+0x14>)
 8000c88:	f000 fbea 	bl	8001460 <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40020400 	.word	0x40020400

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f94f 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f808 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fcdc 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f967 	bl	8000fca <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f000 f92f 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000000c 	.word	0x2000000c
 8000d30:	20000024 	.word	0x20000024
 8000d34:	20000020 	.word	0x20000020

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000024 	.word	0x20000024
 8000d5c:	200000cc 	.word	0x200000cc

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200000cc 	.word	0x200000cc

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff ffee 	bl	8000d60 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ffde 	bl	8000d60 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000024 	.word	0x20000024

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	; (8000e5c <__NVIC_EnableIRQ+0x38>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff29 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff3e 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff31 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa2 	bl	8000f1c <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff feb6 	bl	8000d60 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d008      	beq.n	8001014 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e052      	b.n	80010ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0216 	bic.w	r2, r2, #22
 8001022:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001032:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	2b00      	cmp	r3, #0
 800103a:	d103      	bne.n	8001044 <HAL_DMA_Abort+0x62>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001040:	2b00      	cmp	r3, #0
 8001042:	d007      	beq.n	8001054 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0208 	bic.w	r2, r2, #8
 8001052:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0201 	bic.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001064:	e013      	b.n	800108e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001066:	f7ff fe7b 	bl	8000d60 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b05      	cmp	r3, #5
 8001072:	d90c      	bls.n	800108e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2220      	movs	r2, #32
 8001078:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2203      	movs	r2, #3
 800107e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e015      	b.n	80010ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e4      	bne.n	8001066 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	223f      	movs	r2, #63	; 0x3f
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d004      	beq.n	80010e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e00c      	b.n	80010fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2205      	movs	r2, #5
 80010e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e165      	b.n	80013f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8154 	bne.w	80013ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d005      	beq.n	800115a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	2b02      	cmp	r3, #2
 8001158:	d130      	bne.n	80011bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d017      	beq.n	80011f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d123      	bne.n	800124c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0203 	and.w	r2, r3, #3
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80ae 	beq.w	80013ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <HAL_GPIO_Init+0x300>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a5c      	ldr	r2, [pc, #368]	; (8001408 <HAL_GPIO_Init+0x300>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b5a      	ldr	r3, [pc, #360]	; (8001408 <HAL_GPIO_Init+0x300>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012aa:	4a58      	ldr	r2, [pc, #352]	; (800140c <HAL_GPIO_Init+0x304>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <HAL_GPIO_Init+0x308>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x21a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4e      	ldr	r2, [pc, #312]	; (8001414 <HAL_GPIO_Init+0x30c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x216>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <HAL_GPIO_Init+0x310>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x212>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4c      	ldr	r2, [pc, #304]	; (800141c <HAL_GPIO_Init+0x314>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x20e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <HAL_GPIO_Init+0x318>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x20a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x31c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x206>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <HAL_GPIO_Init+0x320>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x202>
 8001306:	2306      	movs	r3, #6
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 800130a:	2307      	movs	r3, #7
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x304>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_GPIO_Init+0x324>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a31      	ldr	r2, [pc, #196]	; (800142c <HAL_GPIO_Init+0x324>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_GPIO_Init+0x324>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <HAL_GPIO_Init+0x324>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_GPIO_Init+0x324>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1c      	ldr	r2, [pc, #112]	; (800142c <HAL_GPIO_Init+0x324>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_GPIO_Init+0x324>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_GPIO_Init+0x324>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f ae96 	bls.w	8001124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e001      	b.n	8001452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0cc      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a8:	4b68      	ldr	r3, [pc, #416]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d90c      	bls.n	80014d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b65      	ldr	r3, [pc, #404]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0b8      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e8:	4b59      	ldr	r3, [pc, #356]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800150a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	494d      	ldr	r1, [pc, #308]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	4313      	orrs	r3, r2
 800151c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d044      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d119      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e07f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d003      	beq.n	8001552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154e:	2b03      	cmp	r3, #3
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e067      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f023 0203 	bic.w	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4934      	ldr	r1, [pc, #208]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff fbec 	bl	8000d60 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff fbe8 	bl	8000d60 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e04f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 020c 	and.w	r2, r3, #12
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1eb      	bne.n	800158c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d20c      	bcs.n	80015dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e032      	b.n	8001642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4916      	ldr	r1, [pc, #88]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800161a:	f000 f855 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 800161e:	4602      	mov	r2, r0
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	490a      	ldr	r1, [pc, #40]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	5ccb      	ldrb	r3, [r1, r3]
 800162e:	fa22 f303 	lsr.w	r3, r2, r3
 8001632:	4a09      	ldr	r2, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1c8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb4c 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00
 8001650:	40023800 	.word	0x40023800
 8001654:	080030fc 	.word	0x080030fc
 8001658:	2000000c 	.word	0x2000000c
 800165c:	20000020 	.word	0x20000020

08001660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_RCC_GetHCLKFreq+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2000000c 	.word	0x2000000c

08001678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800167c:	f7ff fff0 	bl	8001660 <HAL_RCC_GetHCLKFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	0a9b      	lsrs	r3, r3, #10
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	4903      	ldr	r1, [pc, #12]	; (800169c <HAL_RCC_GetPCLK1Freq+0x24>)
 800168e:	5ccb      	ldrb	r3, [r1, r3]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	0800310c 	.word	0x0800310c

080016a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016a4:	f7ff ffdc 	bl	8001660 <HAL_RCC_GetHCLKFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	0b5b      	lsrs	r3, r3, #13
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	4903      	ldr	r1, [pc, #12]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	0800310c 	.word	0x0800310c

080016c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016cc:	b0ae      	sub	sp, #184	; 0xb8
 80016ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ee:	4bcb      	ldr	r3, [pc, #812]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	f200 8206 	bhi.w	8001b08 <HAL_RCC_GetSysClockFreq+0x440>
 80016fc:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001739 	.word	0x08001739
 8001708:	08001b09 	.word	0x08001b09
 800170c:	08001b09 	.word	0x08001b09
 8001710:	08001b09 	.word	0x08001b09
 8001714:	08001741 	.word	0x08001741
 8001718:	08001b09 	.word	0x08001b09
 800171c:	08001b09 	.word	0x08001b09
 8001720:	08001b09 	.word	0x08001b09
 8001724:	08001749 	.word	0x08001749
 8001728:	08001b09 	.word	0x08001b09
 800172c:	08001b09 	.word	0x08001b09
 8001730:	08001b09 	.word	0x08001b09
 8001734:	08001939 	.word	0x08001939
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001738:	4bb9      	ldr	r3, [pc, #740]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x358>)
 800173a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800173e:	e1e7      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001740:	4bb8      	ldr	r3, [pc, #736]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001746:	e1e3      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001748:	4bb4      	ldr	r3, [pc, #720]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001754:	4bb1      	ldr	r3, [pc, #708]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d071      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001760:	4bae      	ldr	r3, [pc, #696]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	2200      	movs	r2, #0
 8001768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800176c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001786:	4622      	mov	r2, r4
 8001788:	462b      	mov	r3, r5
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	f04f 0100 	mov.w	r1, #0
 8001792:	0159      	lsls	r1, r3, #5
 8001794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001798:	0150      	lsls	r0, r2, #5
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4621      	mov	r1, r4
 80017a0:	1a51      	subs	r1, r2, r1
 80017a2:	6439      	str	r1, [r7, #64]	; 0x40
 80017a4:	4629      	mov	r1, r5
 80017a6:	eb63 0301 	sbc.w	r3, r3, r1
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017b8:	4649      	mov	r1, r9
 80017ba:	018b      	lsls	r3, r1, #6
 80017bc:	4641      	mov	r1, r8
 80017be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017c2:	4641      	mov	r1, r8
 80017c4:	018a      	lsls	r2, r1, #6
 80017c6:	4641      	mov	r1, r8
 80017c8:	1a51      	subs	r1, r2, r1
 80017ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80017cc:	4649      	mov	r1, r9
 80017ce:	eb63 0301 	sbc.w	r3, r3, r1
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017e0:	4649      	mov	r1, r9
 80017e2:	00cb      	lsls	r3, r1, #3
 80017e4:	4641      	mov	r1, r8
 80017e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ea:	4641      	mov	r1, r8
 80017ec:	00ca      	lsls	r2, r1, #3
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	4622      	mov	r2, r4
 80017f6:	189b      	adds	r3, r3, r2
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
 80017fa:	462b      	mov	r3, r5
 80017fc:	460a      	mov	r2, r1
 80017fe:	eb42 0303 	adc.w	r3, r2, r3
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001810:	4629      	mov	r1, r5
 8001812:	024b      	lsls	r3, r1, #9
 8001814:	4621      	mov	r1, r4
 8001816:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800181a:	4621      	mov	r1, r4
 800181c:	024a      	lsls	r2, r1, #9
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001826:	2200      	movs	r2, #0
 8001828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800182c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001830:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001834:	f7fe fce6 	bl	8000204 <__aeabi_uldivmod>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4613      	mov	r3, r2
 800183e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001842:	e067      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001850:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185c:	67bb      	str	r3, [r7, #120]	; 0x78
 800185e:	2300      	movs	r3, #0
 8001860:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001862:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001866:	4622      	mov	r2, r4
 8001868:	462b      	mov	r3, r5
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0159      	lsls	r1, r3, #5
 8001874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001878:	0150      	lsls	r0, r2, #5
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4621      	mov	r1, r4
 8001880:	1a51      	subs	r1, r2, r1
 8001882:	62b9      	str	r1, [r7, #40]	; 0x28
 8001884:	4629      	mov	r1, r5
 8001886:	eb63 0301 	sbc.w	r3, r3, r1
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001898:	4649      	mov	r1, r9
 800189a:	018b      	lsls	r3, r1, #6
 800189c:	4641      	mov	r1, r8
 800189e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a2:	4641      	mov	r1, r8
 80018a4:	018a      	lsls	r2, r1, #6
 80018a6:	4641      	mov	r1, r8
 80018a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ac:	4649      	mov	r1, r9
 80018ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018c6:	4692      	mov	sl, r2
 80018c8:	469b      	mov	fp, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	eb1a 0303 	adds.w	r3, sl, r3
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	462b      	mov	r3, r5
 80018d4:	eb4b 0303 	adc.w	r3, fp, r3
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fc:	2200      	movs	r2, #0
 80018fe:	673b      	str	r3, [r7, #112]	; 0x70
 8001900:	677a      	str	r2, [r7, #116]	; 0x74
 8001902:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001906:	f7fe fc7d 	bl	8000204 <__aeabi_uldivmod>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4613      	mov	r3, r2
 8001910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0c1b      	lsrs	r3, r3, #16
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800192a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001936:	e0eb      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d06b      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001950:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	2200      	movs	r2, #0
 8001958:	66bb      	str	r3, [r7, #104]	; 0x68
 800195a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800195c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800195e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001962:	663b      	str	r3, [r7, #96]	; 0x60
 8001964:	2300      	movs	r3, #0
 8001966:	667b      	str	r3, [r7, #100]	; 0x64
 8001968:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800196c:	4622      	mov	r2, r4
 800196e:	462b      	mov	r3, r5
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	0159      	lsls	r1, r3, #5
 800197a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197e:	0150      	lsls	r0, r2, #5
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4621      	mov	r1, r4
 8001986:	1a51      	subs	r1, r2, r1
 8001988:	61b9      	str	r1, [r7, #24]
 800198a:	4629      	mov	r1, r5
 800198c:	eb63 0301 	sbc.w	r3, r3, r1
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800199e:	4659      	mov	r1, fp
 80019a0:	018b      	lsls	r3, r1, #6
 80019a2:	4651      	mov	r1, sl
 80019a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a8:	4651      	mov	r1, sl
 80019aa:	018a      	lsls	r2, r1, #6
 80019ac:	4651      	mov	r1, sl
 80019ae:	ebb2 0801 	subs.w	r8, r2, r1
 80019b2:	4659      	mov	r1, fp
 80019b4:	eb63 0901 	sbc.w	r9, r3, r1
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019cc:	4690      	mov	r8, r2
 80019ce:	4699      	mov	r9, r3
 80019d0:	4623      	mov	r3, r4
 80019d2:	eb18 0303 	adds.w	r3, r8, r3
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	462b      	mov	r3, r5
 80019da:	eb49 0303 	adc.w	r3, r9, r3
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019ec:	4629      	mov	r1, r5
 80019ee:	024b      	lsls	r3, r1, #9
 80019f0:	4621      	mov	r1, r4
 80019f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f6:	4621      	mov	r1, r4
 80019f8:	024a      	lsls	r2, r1, #9
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a02:	2200      	movs	r2, #0
 8001a04:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a0c:	f7fe fbfa 	bl	8000204 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a1a:	e065      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x420>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a28:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	4611      	mov	r1, r2
 8001a34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a38:	653b      	str	r3, [r7, #80]	; 0x50
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8001a3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a42:	4642      	mov	r2, r8
 8001a44:	464b      	mov	r3, r9
 8001a46:	f04f 0000 	mov.w	r0, #0
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	0159      	lsls	r1, r3, #5
 8001a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a54:	0150      	lsls	r0, r2, #5
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	1a51      	subs	r1, r2, r1
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	4649      	mov	r1, r9
 8001a62:	eb63 0301 	sbc.w	r3, r3, r1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a74:	4659      	mov	r1, fp
 8001a76:	018b      	lsls	r3, r1, #6
 8001a78:	4651      	mov	r1, sl
 8001a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7e:	4651      	mov	r1, sl
 8001a80:	018a      	lsls	r2, r1, #6
 8001a82:	4651      	mov	r1, sl
 8001a84:	1a54      	subs	r4, r2, r1
 8001a86:	4659      	mov	r1, fp
 8001a88:	eb63 0501 	sbc.w	r5, r3, r1
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	00eb      	lsls	r3, r5, #3
 8001a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a9a:	00e2      	lsls	r2, r4, #3
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	461d      	mov	r5, r3
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	18e3      	adds	r3, r4, r3
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	464b      	mov	r3, r9
 8001aa8:	eb45 0303 	adc.w	r3, r5, r3
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aba:	4629      	mov	r1, r5
 8001abc:	028b      	lsls	r3, r1, #10
 8001abe:	4621      	mov	r1, r4
 8001ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	028a      	lsls	r2, r1, #10
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ad6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ada:	f7fe fb93 	bl	8000204 <__aeabi_uldivmod>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x458>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0f1b      	lsrs	r3, r3, #28
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b06:	e003      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	37b8      	adds	r7, #184	; 0xb8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	00f42400 	.word	0x00f42400

08001b28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e28d      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8083 	beq.w	8001c4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b48:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d019      	beq.n	8001b88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b54:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b60:	4b8e      	ldr	r3, [pc, #568]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b6c:	d00c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d05b      	beq.n	8001c4c <HAL_RCC_OscConfig+0x124>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d157      	bne.n	8001c4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e25a      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x90>
 8001baa:	4b7c      	ldr	r3, [pc, #496]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7b      	ldr	r2, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xcc>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0xb4>
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a72      	ldr	r2, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xcc>
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6b      	ldr	r2, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f8b0 	bl	8000d60 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff f8ac 	bl	8000d60 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e21f      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xdc>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff f89c 	bl	8000d60 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f898 	bl	8000d60 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e20b      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x104>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06f      	beq.n	8001d3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c5a:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d017      	beq.n	8001c96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c66:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d105      	bne.n	8001c7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x186>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1d3      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4937      	ldr	r1, [pc, #220]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e03a      	b.n	8001d3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCC_OscConfig+0x278>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f845 	bl	8000d60 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff f841 	bl	8000d60 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1b4      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4925      	ldr	r1, [pc, #148]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x278>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f824 	bl	8000d60 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f820 	bl	8000d60 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e193      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d036      	beq.n	8001db4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d016      	beq.n	8001d7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f804 	bl	8000d60 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f800 	bl	8000d60 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e173      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x234>
 8001d7a:	e01b      	b.n	8001db4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7fe ffed 	bl	8000d60 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	e00e      	b.n	8001da8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7fe ffe9 	bl	8000d60 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d907      	bls.n	8001da8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e15c      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	42470000 	.word	0x42470000
 8001da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b8a      	ldr	r3, [pc, #552]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ea      	bne.n	8001d8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8097 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10f      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a7e      	ldr	r2, [pc, #504]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <HAL_RCC_OscConfig+0x4b0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x4b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a75      	ldr	r2, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x4b0>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe ffa9 	bl	8000d60 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7fe ffa5 	bl	8000d60 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e118      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <HAL_RCC_OscConfig+0x4b0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x31e>
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3c:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	; 0x70
 8001e44:	e01c      	b.n	8001e80 <HAL_RCC_OscConfig+0x358>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x340>
 8001e4e:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	4a60      	ldr	r2, [pc, #384]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5a:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a5d      	ldr	r2, [pc, #372]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0x358>
 8001e68:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a59      	ldr	r2, [pc, #356]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
 8001e74:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a56      	ldr	r2, [pc, #344]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	f023 0304 	bic.w	r3, r3, #4
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d015      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7fe ff6a 	bl	8000d60 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7fe ff66 	bl	8000d60 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0d7      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ee      	beq.n	8001e90 <HAL_RCC_OscConfig+0x368>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7fe ff54 	bl	8000d60 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7fe ff50 	bl	8000d60 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0c1      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ee      	bne.n	8001ebc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80ad 	beq.w	8002054 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001efa:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d060      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d145      	bne.n	8001f9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x4b4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe ff24 	bl	8000d60 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe ff20 	bl	8000d60 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e093      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	019b      	lsls	r3, r3, #6
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	3b01      	subs	r3, #1
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	071b      	lsls	r3, r3, #28
 8001f66:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x4b4>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe fef5 	bl	8000d60 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe fef1 	bl	8000d60 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e064      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x452>
 8001f98:	e05c      	b.n	8002054 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_OscConfig+0x4b4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fede 	bl	8000d60 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7fe feda 	bl	8000d60 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e04d      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x480>
 8001fc6:	e045      	b.n	8002054 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e040      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x538>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d030      	beq.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d129      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d122      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002018:	4293      	cmp	r3, r2
 800201a:	d119      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d10f      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e03f      	b.n	80020f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fb22 	bl	80006d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2224      	movs	r2, #36	; 0x24
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fd7b 	bl	8002ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b08a      	sub	sp, #40	; 0x28
 8002102:	af02      	add	r7, sp, #8
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	4613      	mov	r3, r2
 800210c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	d17c      	bne.n	8002218 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_UART_Transmit+0x2c>
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e075      	b.n	800221a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_UART_Transmit+0x3e>
 8002138:	2302      	movs	r3, #2
 800213a:	e06e      	b.n	800221a <HAL_UART_Transmit+0x11c>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2221      	movs	r2, #33	; 0x21
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002152:	f7fe fe05 	bl	8000d60 <HAL_GetTick>
 8002156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	88fa      	ldrh	r2, [r7, #6]
 800215c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216c:	d108      	bne.n	8002180 <HAL_UART_Transmit+0x82>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d104      	bne.n	8002180 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e003      	b.n	8002188 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002190:	e02a      	b.n	80021e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2200      	movs	r2, #0
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 faf9 	bl	8002794 <UART_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e036      	b.n	800221a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10b      	bne.n	80021ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	3302      	adds	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	e007      	b.n	80021da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	3301      	adds	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1cf      	bne.n	8002192 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2200      	movs	r2, #0
 80021fa:	2140      	movs	r1, #64	; 0x40
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 fac9 	bl	8002794 <UART_WaitOnFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e006      	b.n	800221a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0ba      	sub	sp, #232	; 0xe8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800226a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_UART_IRQHandler+0x66>
 8002276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fbd3 	bl	8002a2e <UART_Receive_IT>
      return;
 8002288:	e256      	b.n	8002738 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800228a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80de 	beq.w	8002450 <HAL_UART_IRQHandler+0x22c>
 8002294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80d1 	beq.w	8002450 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_UART_IRQHandler+0xae>
 80022ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_UART_IRQHandler+0xd2>
 80022de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0202 	orr.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_UART_IRQHandler+0xf6>
 8002302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800231a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d011      	beq.n	800234a <HAL_UART_IRQHandler+0x126>
 8002326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f043 0208 	orr.w	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 81ed 	beq.w	800272e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_UART_IRQHandler+0x14e>
 8002360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fb5e 	bl	8002a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <HAL_UART_IRQHandler+0x17a>
 8002396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d04f      	beq.n	800243e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa66 	bl	8002870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d141      	bne.n	8002436 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023c0:	e853 3f00 	ldrex	r3, [r3]
 80023c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3314      	adds	r3, #20
 80023da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023ee:	e841 2300 	strex	r3, r2, [r1]
 80023f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1d9      	bne.n	80023b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	2b00      	cmp	r3, #0
 8002404:	d013      	beq.n	800242e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	4a7d      	ldr	r2, [pc, #500]	; (8002600 <HAL_UART_IRQHandler+0x3dc>)
 800240c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fe55 	bl	80010c2 <HAL_DMA_Abort_IT>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002428:	4610      	mov	r0, r2
 800242a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	e00e      	b.n	800244c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f99a 	bl	8002768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002434:	e00a      	b.n	800244c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f996 	bl	8002768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800243c:	e006      	b.n	800244c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f992 	bl	8002768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800244a:	e170      	b.n	800272e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244c:	bf00      	nop
    return;
 800244e:	e16e      	b.n	800272e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 814a 	bne.w	80026ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8143 	beq.w	80026ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 813c 	beq.w	80026ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	f040 80b4 	bne.w	8002604 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8140 	beq.w	8002732 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024ba:	429a      	cmp	r2, r3
 80024bc:	f080 8139 	bcs.w	8002732 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d2:	f000 8088 	beq.w	80025e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	330c      	adds	r3, #12
 80024fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002502:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800250e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800251a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1d9      	bne.n	80024d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252c:	e853 3f00 	ldrex	r3, [r3]
 8002530:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002546:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800254a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800254e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002552:	e841 2300 	strex	r3, r2, [r1]
 8002556:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1e1      	bne.n	8002522 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3314      	adds	r3, #20
 8002564:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002568:	e853 3f00 	ldrex	r3, [r3]
 800256c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800256e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3314      	adds	r3, #20
 800257e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002582:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002586:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002588:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800258a:	e841 2300 	strex	r3, r2, [r1]
 800258e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e3      	bne.n	800255e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	330c      	adds	r3, #12
 80025aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ae:	e853 3f00 	ldrex	r3, [r3]
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b6:	f023 0310 	bic.w	r3, r3, #16
 80025ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025d0:	e841 2300 	strex	r3, r2, [r1]
 80025d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e3      	bne.n	80025a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fcfe 	bl	8000fe2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8c0 	bl	800277c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025fc:	e099      	b.n	8002732 <HAL_UART_IRQHandler+0x50e>
 80025fe:	bf00      	nop
 8002600:	08002937 	.word	0x08002937
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800260c:	b29b      	uxth	r3, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 808b 	beq.w	8002736 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8086 	beq.w	8002736 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002640:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800264e:	647a      	str	r2, [r7, #68]	; 0x44
 8002650:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002652:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002656:	e841 2300 	strex	r3, r2, [r1]
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800265c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1e3      	bne.n	800262a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3314      	adds	r3, #20
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	623b      	str	r3, [r7, #32]
   return(result);
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3314      	adds	r3, #20
 8002682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002686:	633a      	str	r2, [r7, #48]	; 0x30
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e3      	bne.n	8002662 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	330c      	adds	r3, #12
 80026ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	e853 3f00 	ldrex	r3, [r3]
 80026b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0310 	bic.w	r3, r3, #16
 80026be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026cc:	61fa      	str	r2, [r7, #28]
 80026ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d0:	69b9      	ldr	r1, [r7, #24]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	e841 2300 	strex	r3, r2, [r1]
 80026d8:	617b      	str	r3, [r7, #20]
   return(result);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e3      	bne.n	80026a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f848 	bl	800277c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026ec:	e023      	b.n	8002736 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_UART_IRQHandler+0x4ea>
 80026fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f929 	bl	800295e <UART_Transmit_IT>
    return;
 800270c:	e014      	b.n	8002738 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00e      	beq.n	8002738 <HAL_UART_IRQHandler+0x514>
 800271a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f969 	bl	80029fe <UART_EndTransmit_IT>
    return;
 800272c:	e004      	b.n	8002738 <HAL_UART_IRQHandler+0x514>
    return;
 800272e:	bf00      	nop
 8002730:	e002      	b.n	8002738 <HAL_UART_IRQHandler+0x514>
      return;
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <HAL_UART_IRQHandler+0x514>
      return;
 8002736:	bf00      	nop
  }
}
 8002738:	37e8      	adds	r7, #232	; 0xe8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop

08002740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b090      	sub	sp, #64	; 0x40
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a4:	e050      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d04c      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80027b4:	f7fe fad4 	bl	8000d60 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d241      	bcs.n	8002848 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	330c      	adds	r3, #12
 80027e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027e4:	637a      	str	r2, [r7, #52]	; 0x34
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e5      	bne.n	80027c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3314      	adds	r3, #20
 80027fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	e853 3f00 	ldrex	r3, [r3]
 8002806:	613b      	str	r3, [r7, #16]
   return(result);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3314      	adds	r3, #20
 8002816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002818:	623a      	str	r2, [r7, #32]
 800281a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281c:	69f9      	ldr	r1, [r7, #28]
 800281e:	6a3a      	ldr	r2, [r7, #32]
 8002820:	e841 2300 	strex	r3, r2, [r1]
 8002824:	61bb      	str	r3, [r7, #24]
   return(result);
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e5      	bne.n	80027f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e00f      	b.n	8002868 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	429a      	cmp	r2, r3
 8002864:	d09f      	beq.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3740      	adds	r7, #64	; 0x40
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b095      	sub	sp, #84	; 0x54
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800288e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002898:	643a      	str	r2, [r7, #64]	; 0x40
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800289e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028a0:	e841 2300 	strex	r3, r2, [r1]
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e5      	bne.n	8002878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d4:	e841 2300 	strex	r3, r2, [r1]
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e5      	bne.n	80028ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d119      	bne.n	800291c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f023 0310 	bic.w	r3, r3, #16
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002908:	61ba      	str	r2, [r7, #24]
 800290a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	613b      	str	r3, [r7, #16]
   return(result);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
}
 800292a:	bf00      	nop
 800292c:	3754      	adds	r7, #84	; 0x54
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff ff09 	bl	8002768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b21      	cmp	r3, #33	; 0x21
 8002970:	d13e      	bne.n	80029f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297a:	d114      	bne.n	80029a6 <UART_Transmit_IT+0x48>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d110      	bne.n	80029a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	1c9a      	adds	r2, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]
 80029a4:	e008      	b.n	80029b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6211      	str	r1, [r2, #32]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4619      	mov	r1, r3
 80029c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10f      	bne.n	80029ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fe8e 	bl	8002740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b08c      	sub	sp, #48	; 0x30
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b22      	cmp	r3, #34	; 0x22
 8002a40:	f040 80ab 	bne.w	8002b9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4c:	d117      	bne.n	8002a7e <UART_Receive_IT+0x50>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	1c9a      	adds	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a7c:	e026      	b.n	8002acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a90:	d007      	beq.n	8002aa2 <UART_Receive_IT+0x74>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <UART_Receive_IT+0x82>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e008      	b.n	8002ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d15a      	bne.n	8002b96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0220 	bic.w	r2, r2, #32
 8002aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d135      	bne.n	8002b8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	613b      	str	r3, [r7, #16]
   return(result);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f023 0310 	bic.w	r3, r3, #16
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	330c      	adds	r3, #12
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	623a      	str	r2, [r7, #32]
 8002b48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	69f9      	ldr	r1, [r7, #28]
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1e5      	bne.n	8002b26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d10a      	bne.n	8002b7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fdf9 	bl	800277c <HAL_UARTEx_RxEventCallback>
 8002b8a:	e002      	b.n	8002b92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fde1 	bl	8002754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e002      	b.n	8002b9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3730      	adds	r7, #48	; 0x30
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba8:	b0c0      	sub	sp, #256	; 0x100
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	ea40 0301 	orr.w	r3, r0, r1
 8002bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bfc:	f021 010c 	bic.w	r1, r1, #12
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1e:	6999      	ldr	r1, [r3, #24]
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	ea40 0301 	orr.w	r3, r0, r1
 8002c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b8f      	ldr	r3, [pc, #572]	; (8002e70 <UART_SetConfig+0x2cc>)
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d005      	beq.n	8002c44 <UART_SetConfig+0xa0>
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b8d      	ldr	r3, [pc, #564]	; (8002e74 <UART_SetConfig+0x2d0>)
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d104      	bne.n	8002c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c44:	f7fe fd2c 	bl	80016a0 <HAL_RCC_GetPCLK2Freq>
 8002c48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c4c:	e003      	b.n	8002c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c4e:	f7fe fd13 	bl	8001678 <HAL_RCC_GetPCLK1Freq>
 8002c52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c60:	f040 810c 	bne.w	8002e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c76:	4622      	mov	r2, r4
 8002c78:	462b      	mov	r3, r5
 8002c7a:	1891      	adds	r1, r2, r2
 8002c7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c7e:	415b      	adcs	r3, r3
 8002c80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c86:	4621      	mov	r1, r4
 8002c88:	eb12 0801 	adds.w	r8, r2, r1
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	eb43 0901 	adc.w	r9, r3, r1
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ca6:	4690      	mov	r8, r2
 8002ca8:	4699      	mov	r9, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	eb18 0303 	adds.w	r3, r8, r3
 8002cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	eb49 0303 	adc.w	r3, r9, r3
 8002cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	18db      	adds	r3, r3, r3
 8002cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8002cd8:	4613      	mov	r3, r2
 8002cda:	eb42 0303 	adc.w	r3, r2, r3
 8002cde:	657b      	str	r3, [r7, #84]	; 0x54
 8002ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ce8:	f7fd fa8c 	bl	8000204 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <UART_SetConfig+0x2d4>)
 8002cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	011c      	lsls	r4, r3, #4
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d14:	415b      	adcs	r3, r3
 8002d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d22:	4649      	mov	r1, r9
 8002d24:	eb43 0b01 	adc.w	fp, r3, r1
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	469b      	mov	fp, r3
 8002d40:	4643      	mov	r3, r8
 8002d42:	eb1a 0303 	adds.w	r3, sl, r3
 8002d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	18db      	adds	r3, r3, r3
 8002d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d6e:	4613      	mov	r3, r2
 8002d70:	eb42 0303 	adc.w	r3, r2, r3
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
 8002d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d7e:	f7fd fa41 	bl	8000204 <__aeabi_uldivmod>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <UART_SetConfig+0x2d4>)
 8002d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2264      	movs	r2, #100	; 0x64
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	1acb      	subs	r3, r1, r3
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <UART_SetConfig+0x2d4>)
 8002da0:	fba3 2302 	umull	r2, r3, r3, r2
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dac:	441c      	add	r4, r3
 8002dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002db8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	1891      	adds	r1, r2, r2
 8002dc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dc8:	415b      	adcs	r3, r3
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	1851      	adds	r1, r2, r1
 8002dd4:	6339      	str	r1, [r7, #48]	; 0x30
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	414b      	adcs	r3, r1
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002de8:	4659      	mov	r1, fp
 8002dea:	00cb      	lsls	r3, r1, #3
 8002dec:	4651      	mov	r1, sl
 8002dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df2:	4651      	mov	r1, sl
 8002df4:	00ca      	lsls	r2, r1, #3
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	189b      	adds	r3, r3, r2
 8002e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e04:	464b      	mov	r3, r9
 8002e06:	460a      	mov	r2, r1
 8002e08:	eb42 0303 	adc.w	r3, r2, r3
 8002e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e24:	460b      	mov	r3, r1
 8002e26:	18db      	adds	r3, r3, r3
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	eb42 0303 	adc.w	r3, r2, r3
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e3a:	f7fd f9e3 	bl	8000204 <__aeabi_uldivmod>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <UART_SetConfig+0x2d4>)
 8002e44:	fba3 1302 	umull	r1, r3, r3, r2
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	2164      	movs	r1, #100	; 0x64
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	3332      	adds	r3, #50	; 0x32
 8002e56:	4a08      	ldr	r2, [pc, #32]	; (8002e78 <UART_SetConfig+0x2d4>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	f003 0207 	and.w	r2, r3, #7
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4422      	add	r2, r4
 8002e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e6c:	e106      	b.n	800307c <UART_SetConfig+0x4d8>
 8002e6e:	bf00      	nop
 8002e70:	40011000 	.word	0x40011000
 8002e74:	40011400 	.word	0x40011400
 8002e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e8e:	4642      	mov	r2, r8
 8002e90:	464b      	mov	r3, r9
 8002e92:	1891      	adds	r1, r2, r2
 8002e94:	6239      	str	r1, [r7, #32]
 8002e96:	415b      	adcs	r3, r3
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	1854      	adds	r4, r2, r1
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	eb43 0501 	adc.w	r5, r3, r1
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	00eb      	lsls	r3, r5, #3
 8002eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eb6:	00e2      	lsls	r2, r4, #3
 8002eb8:	4614      	mov	r4, r2
 8002eba:	461d      	mov	r5, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	18e3      	adds	r3, r4, r3
 8002ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	eb45 0303 	adc.w	r3, r5, r3
 8002eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eea:	4629      	mov	r1, r5
 8002eec:	008b      	lsls	r3, r1, #2
 8002eee:	4621      	mov	r1, r4
 8002ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	008a      	lsls	r2, r1, #2
 8002ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002efc:	f7fd f982 	bl	8000204 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4b60      	ldr	r3, [pc, #384]	; (8003088 <UART_SetConfig+0x4e4>)
 8002f06:	fba3 2302 	umull	r2, r3, r3, r2
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	011c      	lsls	r4, r3, #4
 8002f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f20:	4642      	mov	r2, r8
 8002f22:	464b      	mov	r3, r9
 8002f24:	1891      	adds	r1, r2, r2
 8002f26:	61b9      	str	r1, [r7, #24]
 8002f28:	415b      	adcs	r3, r3
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f30:	4641      	mov	r1, r8
 8002f32:	1851      	adds	r1, r2, r1
 8002f34:	6139      	str	r1, [r7, #16]
 8002f36:	4649      	mov	r1, r9
 8002f38:	414b      	adcs	r3, r1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f48:	4659      	mov	r1, fp
 8002f4a:	00cb      	lsls	r3, r1, #3
 8002f4c:	4651      	mov	r1, sl
 8002f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f52:	4651      	mov	r1, sl
 8002f54:	00ca      	lsls	r2, r1, #3
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f64:	464b      	mov	r3, r9
 8002f66:	460a      	mov	r2, r1
 8002f68:	eb42 0303 	adc.w	r3, r2, r3
 8002f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f88:	4649      	mov	r1, r9
 8002f8a:	008b      	lsls	r3, r1, #2
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f92:	4641      	mov	r1, r8
 8002f94:	008a      	lsls	r2, r1, #2
 8002f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f9a:	f7fd f933 	bl	8000204 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <UART_SetConfig+0x4e4>)
 8002fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2264      	movs	r2, #100	; 0x64
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	1acb      	subs	r3, r1, r3
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	3332      	adds	r3, #50	; 0x32
 8002fb8:	4a33      	ldr	r2, [pc, #204]	; (8003088 <UART_SetConfig+0x4e4>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc4:	441c      	add	r4, r3
 8002fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fca:	2200      	movs	r2, #0
 8002fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8002fce:	677a      	str	r2, [r7, #116]	; 0x74
 8002fd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	1851      	adds	r1, r2, r1
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	4649      	mov	r1, r9
 8002fec:	414b      	adcs	r3, r1
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	00cb      	lsls	r3, r1, #3
 8003000:	4651      	mov	r1, sl
 8003002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003006:	4651      	mov	r1, sl
 8003008:	00ca      	lsls	r2, r1, #3
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	4603      	mov	r3, r0
 8003010:	4642      	mov	r2, r8
 8003012:	189b      	adds	r3, r3, r2
 8003014:	66bb      	str	r3, [r7, #104]	; 0x68
 8003016:	464b      	mov	r3, r9
 8003018:	460a      	mov	r2, r1
 800301a:	eb42 0303 	adc.w	r3, r2, r3
 800301e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	663b      	str	r3, [r7, #96]	; 0x60
 800302a:	667a      	str	r2, [r7, #100]	; 0x64
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003038:	4649      	mov	r1, r9
 800303a:	008b      	lsls	r3, r1, #2
 800303c:	4641      	mov	r1, r8
 800303e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003042:	4641      	mov	r1, r8
 8003044:	008a      	lsls	r2, r1, #2
 8003046:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800304a:	f7fd f8db 	bl	8000204 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <UART_SetConfig+0x4e4>)
 8003054:	fba3 1302 	umull	r1, r3, r3, r2
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	2164      	movs	r1, #100	; 0x64
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	3332      	adds	r3, #50	; 0x32
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <UART_SetConfig+0x4e4>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4422      	add	r2, r4
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003082:	46bd      	mov	sp, r7
 8003084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003088:	51eb851f 	.word	0x51eb851f

0800308c <memset>:
 800308c:	4402      	add	r2, r0
 800308e:	4603      	mov	r3, r0
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	f803 1b01 	strb.w	r1, [r3], #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4d0d      	ldr	r5, [pc, #52]	; (80030d4 <__libc_init_array+0x38>)
 80030a0:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a2:	1b64      	subs	r4, r4, r5
 80030a4:	10a4      	asrs	r4, r4, #2
 80030a6:	2600      	movs	r6, #0
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	4d0b      	ldr	r5, [pc, #44]	; (80030dc <__libc_init_array+0x40>)
 80030ae:	4c0c      	ldr	r4, [pc, #48]	; (80030e0 <__libc_init_array+0x44>)
 80030b0:	f000 f818 	bl	80030e4 <_init>
 80030b4:	1b64      	subs	r4, r4, r5
 80030b6:	10a4      	asrs	r4, r4, #2
 80030b8:	2600      	movs	r6, #0
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	0800311c 	.word	0x0800311c
 80030d8:	0800311c 	.word	0x0800311c
 80030dc:	0800311c 	.word	0x0800311c
 80030e0:	08003120 	.word	0x08003120

080030e4 <_init>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	bf00      	nop
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr

080030f0 <_fini>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr
