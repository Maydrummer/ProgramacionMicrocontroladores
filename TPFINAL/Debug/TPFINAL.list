
TPFINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e00  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe4  08002fe4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fec  08002fec  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000018  0800300c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  0800300c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ceb  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001807  00000000  00000000  00028d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  0002a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000577  00000000  00000000  0002aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d3f  00000000  00000000  0002b217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f34  00000000  00000000  0004bf56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7db8  00000000  00000000  00055e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c14  00000000  00000000  0011dc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002fac 	.word	0x08002fac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08002fac 	.word	0x08002fac

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fac4 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f870 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f930 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f904 	bl	800071c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000514:	f000 f8d8 	bl	80006c8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, dataT, 12, HAL_MAX_DELAY);
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	220c      	movs	r2, #12
 800051e:	492a      	ldr	r1, [pc, #168]	; (80005c8 <main+0xc8>)
 8000520:	482a      	ldr	r0, [pc, #168]	; (80005cc <main+0xcc>)
 8000522:	f001 fcae 	bl	8001e82 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Receive(&huart4, dataR,sizeof(dataR), HAL_MAX_DELAY);
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	220d      	movs	r2, #13
 800052c:	4928      	ldr	r1, [pc, #160]	; (80005d0 <main+0xd0>)
 800052e:	4829      	ldr	r0, [pc, #164]	; (80005d4 <main+0xd4>)
 8000530:	f001 fd39 	bl	8001fa6 <HAL_UART_Receive>
	  //HAL_UART_Transmit(&huart2, (uint8_t *)dataR, sizeof(dataR), HAL_MAX_DELAY);
	  //extraer valor
	  valor[0]=dataR[4];
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <main+0xd0>)
 8000536:	791a      	ldrb	r2, [r3, #4]
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <main+0xd8>)
 800053a:	701a      	strb	r2, [r3, #0]
	  valor[1]=dataR[5];
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <main+0xd0>)
 800053e:	795a      	ldrb	r2, [r3, #5]
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <main+0xd8>)
 8000542:	705a      	strb	r2, [r3, #1]
	  //procesar datos
	  asciiformat[0]= (valor[1] / 100) + '0';  // Dígito de las centenas
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <main+0xd8>)
 8000546:	785b      	ldrb	r3, [r3, #1]
 8000548:	4a24      	ldr	r2, [pc, #144]	; (80005dc <main+0xdc>)
 800054a:	fba2 2303 	umull	r2, r3, r2, r3
 800054e:	095b      	lsrs	r3, r3, #5
 8000550:	b2db      	uxtb	r3, r3
 8000552:	3330      	adds	r3, #48	; 0x30
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <main+0xe0>)
 8000558:	701a      	strb	r2, [r3, #0]
	  asciiformat[1]= ((valor[1] / 10) % 10) + '0';  // Dígito de las decenas
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <main+0xd8>)
 800055c:	785b      	ldrb	r3, [r3, #1]
 800055e:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <main+0xe4>)
 8000560:	fba2 2303 	umull	r2, r3, r2, r3
 8000564:	08db      	lsrs	r3, r3, #3
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <main+0xe4>)
 800056a:	fba3 1302 	umull	r1, r3, r3, r2
 800056e:	08d9      	lsrs	r1, r3, #3
 8000570:	460b      	mov	r3, r1
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	3330      	adds	r3, #48	; 0x30
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <main+0xe0>)
 8000582:	705a      	strb	r2, [r3, #1]
	  asciiformat[2]= (valor[1] % 10) + '0'; // Dígito de las unidades
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0xd8>)
 8000586:	785a      	ldrb	r2, [r3, #1]
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <main+0xe4>)
 800058a:	fba3 1302 	umull	r1, r3, r3, r2
 800058e:	08d9      	lsrs	r1, r3, #3
 8000590:	460b      	mov	r3, r1
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	3330      	adds	r3, #48	; 0x30
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <main+0xe0>)
 80005a2:	709a      	strb	r2, [r3, #2]
	  asciiformat[3]= '\0';  // caracter nulo
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <main+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	70da      	strb	r2, [r3, #3]
	  HAL_UART_Transmit(&huart2, (uint8_t *)asciiformat, sizeof(asciiformat), HAL_MAX_DELAY);
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2204      	movs	r2, #4
 80005b0:	490b      	ldr	r1, [pc, #44]	; (80005e0 <main+0xe0>)
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <main+0xcc>)
 80005b4:	f001 fc65 	bl	8001e82 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)"Cm\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	2203      	movs	r2, #3
 80005be:	490a      	ldr	r1, [pc, #40]	; (80005e8 <main+0xe8>)
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <main+0xcc>)
 80005c2:	f001 fc5e 	bl	8001e82 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart4, dataR,sizeof(dataR), HAL_MAX_DELAY);
 80005c6:	e7ae      	b.n	8000526 <main+0x26>
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000078 	.word	0x20000078
 80005d0:	200000bc 	.word	0x200000bc
 80005d4:	20000034 	.word	0x20000034
 80005d8:	200000cc 	.word	0x200000cc
 80005dc:	51eb851f 	.word	0x51eb851f
 80005e0:	200000d0 	.word	0x200000d0
 80005e4:	cccccccd 	.word	0xcccccccd
 80005e8:	08002fc4 	.word	0x08002fc4

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fcaa 	bl	8002f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <SystemClock_Config+0xd4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <SystemClock_Config+0xd4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <SystemClock_Config+0xd8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <SystemClock_Config+0xd8>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f916 	bl	80018ac <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000686:	f000 f8e1 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fdb6 	bl	8001218 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006b2:	f000 f8cb 	bl	800084c <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_UART4_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_UART4_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_UART4_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_UART4_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_UART4_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_UART4_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_UART4_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_UART4_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_UART4_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_UART4_Init+0x4c>)
 8000700:	f001 fb72 	bl	8001de8 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f89f 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000034 	.word	0x20000034
 8000718:	40004c00 	.word	0x40004c00

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f001 fb48 	bl	8001de8 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f875 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000078 	.word	0x20000078
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a2c      	ldr	r2, [pc, #176]	; (8000840 <MX_GPIO_Init+0xd0>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a25      	ldr	r2, [pc, #148]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007fc:	f000 fcf2 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000806:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_GPIO_Init+0xd8>)
 8000818:	f000 fb50 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081c:	2320      	movs	r3, #32
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0xd4>)
 8000834:	f000 fb42 	bl	8000ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000
 8000848:	40020800 	.word	0x40020800

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000896:	2007      	movs	r0, #7
 8000898:	f000 fa3c 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a36      	ldr	r2, [pc, #216]	; (80009a0 <HAL_UART_MspInit+0xf8>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d134      	bne.n	8000934 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a34      	ldr	r2, [pc, #208]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 80008d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a2d      	ldr	r2, [pc, #180]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000902:	2303      	movs	r3, #3
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000912:	2308      	movs	r3, #8
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4822      	ldr	r0, [pc, #136]	; (80009a8 <HAL_UART_MspInit+0x100>)
 800091e:	f000 facd 	bl	8000ebc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2034      	movs	r0, #52	; 0x34
 8000928:	f000 f9ff 	bl	8000d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800092c:	2034      	movs	r0, #52	; 0x34
 800092e:	f000 fa18 	bl	8000d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000932:	e030      	b.n	8000996 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HAL_UART_MspInit+0x104>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_UART_MspInit+0xfc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000976:	230c      	movs	r3, #12
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000986:	2307      	movs	r3, #7
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0x100>)
 8000992:	f000 fa93 	bl	8000ebc <HAL_GPIO_Init>
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004c00 	.word	0x40004c00
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40004400 	.word	0x40004400

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f89a 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <UART4_IRQHandler+0x10>)
 8000a0a:	f001 fb6f 	bl	80020ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000034 	.word	0x20000034

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a58:	4c0b      	ldr	r4, [pc, #44]	; (8000a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a66:	f7ff ffd7 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f002 fa7b 	bl	8002f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fd47 	bl	8000500 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a80:	08002ff4 	.word	0x08002ff4
  ldr r2, =_sbss
 8000a84:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a88:	200000d8 	.word	0x200000d8

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_Init+0x40>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_Init+0x40>)
 8000aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x40>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f92b 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fec8 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023c00 	.word	0x40023c00

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f943 	bl	8000d7e <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f90b 	bl	8000d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000000c 	.word	0x2000000c
 8000b2c:	20000014 	.word	0x20000014
 8000b30:	20000010 	.word	0x20000010

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000014 	.word	0x20000014
 8000b58:	200000d4 	.word	0x200000d4

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200000d4 	.word	0x200000d4

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff29 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff3e 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff31 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffa2 	bl	8000cd0 <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff feda 	bl	8000b5c <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d008      	beq.n	8000dc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e052      	b.n	8000e6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0216 	bic.w	r2, r2, #22
 8000dd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000de6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d103      	bne.n	8000df8 <HAL_DMA_Abort+0x62>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d007      	beq.n	8000e08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0208 	bic.w	r2, r2, #8
 8000e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0201 	bic.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e18:	e013      	b.n	8000e42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e1a:	f7ff fe9f 	bl	8000b5c <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d90c      	bls.n	8000e42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e015      	b.n	8000e6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1e4      	bne.n	8000e1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e54:	223f      	movs	r2, #63	; 0x3f
 8000e56:	409a      	lsls	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d004      	beq.n	8000e94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e00c      	b.n	8000eae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2205      	movs	r2, #5
 8000e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	e165      	b.n	80011a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 8154 	bne.w	800119e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d130      	bne.n	8000f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	f003 0201 	and.w	r2, r3, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d017      	beq.n	8000fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d123      	bne.n	8001000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0203 	and.w	r2, r3, #3
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80ae 	beq.w	800119e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <HAL_GPIO_Init+0x300>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a5c      	ldr	r2, [pc, #368]	; (80011bc <HAL_GPIO_Init+0x300>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <HAL_GPIO_Init+0x300>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105e:	4a58      	ldr	r2, [pc, #352]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x308>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d025      	beq.n	80010d6 <HAL_GPIO_Init+0x21a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <HAL_GPIO_Init+0x30c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01f      	beq.n	80010d2 <HAL_GPIO_Init+0x216>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4d      	ldr	r2, [pc, #308]	; (80011cc <HAL_GPIO_Init+0x310>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x212>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x20e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x20a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4a      	ldr	r2, [pc, #296]	; (80011d8 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x206>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a49      	ldr	r2, [pc, #292]	; (80011dc <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x202>
 80010ba:	2306      	movs	r3, #6
 80010bc:	e00c      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010be:	2307      	movs	r3, #7
 80010c0:	e00a      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010c2:	2305      	movs	r3, #5
 80010c4:	e008      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x21c>
 80010d6:	2300      	movs	r3, #0
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x304>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <HAL_GPIO_Init+0x324>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111a:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <HAL_GPIO_Init+0x324>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_GPIO_Init+0x324>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001144:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <HAL_GPIO_Init+0x324>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <HAL_GPIO_Init+0x324>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <HAL_GPIO_Init+0x324>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_GPIO_Init+0x324>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_GPIO_Init+0x324>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	f67f ae96 	bls.w	8000ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40021400 	.word	0x40021400
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001200:	e003      	b.n	800120a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0cc      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d90c      	bls.n	8001254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0b8      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800126c:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800128e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001290:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	494d      	ldr	r1, [pc, #308]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d044      	beq.n	8001338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d119      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e07f      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d003      	beq.n	80012d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d107      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e06f      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e067      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f023 0203 	bic.w	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4934      	ldr	r1, [pc, #208]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001308:	f7ff fc28 	bl	8000b5c <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130e:	e00a      	b.n	8001326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001310:	f7ff fc24 	bl	8000b5c <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f241 3288 	movw	r2, #5000	; 0x1388
 800131e:	4293      	cmp	r3, r2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e04f      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 020c 	and.w	r2, r3, #12
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	429a      	cmp	r2, r3
 8001336:	d1eb      	bne.n	8001310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d20c      	bcs.n	8001360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e032      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4916      	ldr	r1, [pc, #88]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	4313      	orrs	r3, r2
 800137c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	490e      	ldr	r1, [pc, #56]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	4313      	orrs	r3, r2
 800139c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800139e:	f000 f855 	bl	800144c <HAL_RCC_GetSysClockFreq>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	490a      	ldr	r1, [pc, #40]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	5ccb      	ldrb	r3, [r1, r3]
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_RCC_ClockConfig+0x1c8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fb88 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00
 80013d4:	40023800 	.word	0x40023800
 80013d8:	08002fcc 	.word	0x08002fcc
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	20000010 	.word	0x20000010

080013e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2000000c 	.word	0x2000000c

080013fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001400:	f7ff fff0 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 8001404:	4602      	mov	r2, r0
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	0a9b      	lsrs	r3, r3, #10
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	4903      	ldr	r1, [pc, #12]	; (8001420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	08002fdc 	.word	0x08002fdc

08001424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001428:	f7ff ffdc 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	0b5b      	lsrs	r3, r3, #13
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	4903      	ldr	r1, [pc, #12]	; (8001448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	08002fdc 	.word	0x08002fdc

0800144c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800144c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001450:	b0ae      	sub	sp, #184	; 0xb8
 8001452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001472:	4bcb      	ldr	r3, [pc, #812]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b0c      	cmp	r3, #12
 800147c:	f200 8206 	bhi.w	800188c <HAL_RCC_GetSysClockFreq+0x440>
 8001480:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	080014bd 	.word	0x080014bd
 800148c:	0800188d 	.word	0x0800188d
 8001490:	0800188d 	.word	0x0800188d
 8001494:	0800188d 	.word	0x0800188d
 8001498:	080014c5 	.word	0x080014c5
 800149c:	0800188d 	.word	0x0800188d
 80014a0:	0800188d 	.word	0x0800188d
 80014a4:	0800188d 	.word	0x0800188d
 80014a8:	080014cd 	.word	0x080014cd
 80014ac:	0800188d 	.word	0x0800188d
 80014b0:	0800188d 	.word	0x0800188d
 80014b4:	0800188d 	.word	0x0800188d
 80014b8:	080016bd 	.word	0x080016bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4bb9      	ldr	r3, [pc, #740]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014c2:	e1e7      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014c4:	4bb8      	ldr	r3, [pc, #736]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014ca:	e1e3      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014cc:	4bb4      	ldr	r3, [pc, #720]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d8:	4bb1      	ldr	r3, [pc, #708]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d071      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e4:	4bae      	ldr	r3, [pc, #696]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800150a:	4622      	mov	r2, r4
 800150c:	462b      	mov	r3, r5
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	0159      	lsls	r1, r3, #5
 8001518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800151c:	0150      	lsls	r0, r2, #5
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4621      	mov	r1, r4
 8001524:	1a51      	subs	r1, r2, r1
 8001526:	6439      	str	r1, [r7, #64]	; 0x40
 8001528:	4629      	mov	r1, r5
 800152a:	eb63 0301 	sbc.w	r3, r3, r1
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800153c:	4649      	mov	r1, r9
 800153e:	018b      	lsls	r3, r1, #6
 8001540:	4641      	mov	r1, r8
 8001542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001546:	4641      	mov	r1, r8
 8001548:	018a      	lsls	r2, r1, #6
 800154a:	4641      	mov	r1, r8
 800154c:	1a51      	subs	r1, r2, r1
 800154e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001550:	4649      	mov	r1, r9
 8001552:	eb63 0301 	sbc.w	r3, r3, r1
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001564:	4649      	mov	r1, r9
 8001566:	00cb      	lsls	r3, r1, #3
 8001568:	4641      	mov	r1, r8
 800156a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800156e:	4641      	mov	r1, r8
 8001570:	00ca      	lsls	r2, r1, #3
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	4603      	mov	r3, r0
 8001578:	4622      	mov	r2, r4
 800157a:	189b      	adds	r3, r3, r2
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
 800157e:	462b      	mov	r3, r5
 8001580:	460a      	mov	r2, r1
 8001582:	eb42 0303 	adc.w	r3, r2, r3
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001594:	4629      	mov	r1, r5
 8001596:	024b      	lsls	r3, r1, #9
 8001598:	4621      	mov	r1, r4
 800159a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800159e:	4621      	mov	r1, r4
 80015a0:	024a      	lsls	r2, r1, #9
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015aa:	2200      	movs	r2, #0
 80015ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015b8:	f7fe fe24 	bl	8000204 <__aeabi_uldivmod>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4613      	mov	r3, r2
 80015c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015c6:	e067      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c8:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	2200      	movs	r2, #0
 80015d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80015e2:	2300      	movs	r3, #0
 80015e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015ea:	4622      	mov	r2, r4
 80015ec:	462b      	mov	r3, r5
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	f04f 0100 	mov.w	r1, #0
 80015f6:	0159      	lsls	r1, r3, #5
 80015f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015fc:	0150      	lsls	r0, r2, #5
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4621      	mov	r1, r4
 8001604:	1a51      	subs	r1, r2, r1
 8001606:	62b9      	str	r1, [r7, #40]	; 0x28
 8001608:	4629      	mov	r1, r5
 800160a:	eb63 0301 	sbc.w	r3, r3, r1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800161c:	4649      	mov	r1, r9
 800161e:	018b      	lsls	r3, r1, #6
 8001620:	4641      	mov	r1, r8
 8001622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001626:	4641      	mov	r1, r8
 8001628:	018a      	lsls	r2, r1, #6
 800162a:	4641      	mov	r1, r8
 800162c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001630:	4649      	mov	r1, r9
 8001632:	eb63 0b01 	sbc.w	fp, r3, r1
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001642:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800164a:	4692      	mov	sl, r2
 800164c:	469b      	mov	fp, r3
 800164e:	4623      	mov	r3, r4
 8001650:	eb1a 0303 	adds.w	r3, sl, r3
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	462b      	mov	r3, r5
 8001658:	eb4b 0303 	adc.w	r3, fp, r3
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800166a:	4629      	mov	r1, r5
 800166c:	028b      	lsls	r3, r1, #10
 800166e:	4621      	mov	r1, r4
 8001670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001674:	4621      	mov	r1, r4
 8001676:	028a      	lsls	r2, r1, #10
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001680:	2200      	movs	r2, #0
 8001682:	673b      	str	r3, [r7, #112]	; 0x70
 8001684:	677a      	str	r2, [r7, #116]	; 0x74
 8001686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800168a:	f7fe fdbb 	bl	8000204 <__aeabi_uldivmod>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4613      	mov	r3, r2
 8001694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	3301      	adds	r3, #1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ba:	e0eb      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016c8:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d06b      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	2200      	movs	r2, #0
 80016dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80016de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
 80016e8:	2300      	movs	r3, #0
 80016ea:	667b      	str	r3, [r7, #100]	; 0x64
 80016ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016f0:	4622      	mov	r2, r4
 80016f2:	462b      	mov	r3, r5
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	0159      	lsls	r1, r3, #5
 80016fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001702:	0150      	lsls	r0, r2, #5
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4621      	mov	r1, r4
 800170a:	1a51      	subs	r1, r2, r1
 800170c:	61b9      	str	r1, [r7, #24]
 800170e:	4629      	mov	r1, r5
 8001710:	eb63 0301 	sbc.w	r3, r3, r1
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001722:	4659      	mov	r1, fp
 8001724:	018b      	lsls	r3, r1, #6
 8001726:	4651      	mov	r1, sl
 8001728:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800172c:	4651      	mov	r1, sl
 800172e:	018a      	lsls	r2, r1, #6
 8001730:	4651      	mov	r1, sl
 8001732:	ebb2 0801 	subs.w	r8, r2, r1
 8001736:	4659      	mov	r1, fp
 8001738:	eb63 0901 	sbc.w	r9, r3, r1
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001748:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800174c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001750:	4690      	mov	r8, r2
 8001752:	4699      	mov	r9, r3
 8001754:	4623      	mov	r3, r4
 8001756:	eb18 0303 	adds.w	r3, r8, r3
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	462b      	mov	r3, r5
 800175e:	eb49 0303 	adc.w	r3, r9, r3
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001770:	4629      	mov	r1, r5
 8001772:	024b      	lsls	r3, r1, #9
 8001774:	4621      	mov	r1, r4
 8001776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800177a:	4621      	mov	r1, r4
 800177c:	024a      	lsls	r2, r1, #9
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001786:	2200      	movs	r2, #0
 8001788:	65bb      	str	r3, [r7, #88]	; 0x58
 800178a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800178c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001790:	f7fe fd38 	bl	8000204 <__aeabi_uldivmod>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4613      	mov	r3, r2
 800179a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800179e:	e065      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x420>
 80017a0:	40023800 	.word	0x40023800
 80017a4:	00f42400 	.word	0x00f42400
 80017a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	2200      	movs	r2, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	4611      	mov	r1, r2
 80017b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017bc:	653b      	str	r3, [r7, #80]	; 0x50
 80017be:	2300      	movs	r3, #0
 80017c0:	657b      	str	r3, [r7, #84]	; 0x54
 80017c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017c6:	4642      	mov	r2, r8
 80017c8:	464b      	mov	r3, r9
 80017ca:	f04f 0000 	mov.w	r0, #0
 80017ce:	f04f 0100 	mov.w	r1, #0
 80017d2:	0159      	lsls	r1, r3, #5
 80017d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d8:	0150      	lsls	r0, r2, #5
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4641      	mov	r1, r8
 80017e0:	1a51      	subs	r1, r2, r1
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	4649      	mov	r1, r9
 80017e6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017f8:	4659      	mov	r1, fp
 80017fa:	018b      	lsls	r3, r1, #6
 80017fc:	4651      	mov	r1, sl
 80017fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001802:	4651      	mov	r1, sl
 8001804:	018a      	lsls	r2, r1, #6
 8001806:	4651      	mov	r1, sl
 8001808:	1a54      	subs	r4, r2, r1
 800180a:	4659      	mov	r1, fp
 800180c:	eb63 0501 	sbc.w	r5, r3, r1
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	00eb      	lsls	r3, r5, #3
 800181a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800181e:	00e2      	lsls	r2, r4, #3
 8001820:	4614      	mov	r4, r2
 8001822:	461d      	mov	r5, r3
 8001824:	4643      	mov	r3, r8
 8001826:	18e3      	adds	r3, r4, r3
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	464b      	mov	r3, r9
 800182c:	eb45 0303 	adc.w	r3, r5, r3
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800183e:	4629      	mov	r1, r5
 8001840:	028b      	lsls	r3, r1, #10
 8001842:	4621      	mov	r1, r4
 8001844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001848:	4621      	mov	r1, r4
 800184a:	028a      	lsls	r2, r1, #10
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001854:	2200      	movs	r2, #0
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
 8001858:	64fa      	str	r2, [r7, #76]	; 0x4c
 800185a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800185e:	f7fe fcd1 	bl	8000204 <__aeabi_uldivmod>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4613      	mov	r3, r2
 8001868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0f1b      	lsrs	r3, r3, #28
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800187a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800187e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800188a:	e003      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001898:	4618      	mov	r0, r3
 800189a:	37b8      	adds	r7, #184	; 0xb8
 800189c:	46bd      	mov	sp, r7
 800189e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	00f42400 	.word	0x00f42400

080018ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e28d      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8083 	beq.w	80019d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018cc:	4b94      	ldr	r3, [pc, #592]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d019      	beq.n	800190c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d8:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018e4:	4b8e      	ldr	r3, [pc, #568]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f0:	d00c      	beq.n	800190c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190a:	d10b      	bne.n	8001924 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d05b      	beq.n	80019d0 <HAL_RCC_OscConfig+0x124>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d157      	bne.n	80019d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e25a      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x90>
 800192e:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7b      	ldr	r2, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e01d      	b.n	8001978 <HAL_RCC_OscConfig+0xcc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0xb4>
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0xcc>
 8001960:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6b      	ldr	r2, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f8ec 	bl	8000b5c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff f8e8 	bl	8000b5c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e21f      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0xdc>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f8d8 	bl	8000b5c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff f8d4 	bl	8000b5c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e20b      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x104>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d06f      	beq.n	8001abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019de:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d017      	beq.n	8001a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ea:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019f6:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d11c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d116      	bne.n	8001a48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x186>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1d3      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4937      	ldr	r1, [pc, #220]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_OscConfig+0x278>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f881 	bl	8000b5c <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f87d 	bl	8000b5c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1b4      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4925      	ldr	r1, [pc, #148]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x278>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f860 	bl	8000b5c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f85c 	bl	8000b5c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e193      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d036      	beq.n	8001b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f840 	bl	8000b5c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f83c 	bl	8000b5c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e173      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x234>
 8001afe:	e01b      	b.n	8001b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff f829 	bl	8000b5c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	e00e      	b.n	8001b2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f825 	bl	8000b5c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d907      	bls.n	8001b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e15c      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
 8001b20:	40023800 	.word	0x40023800
 8001b24:	42470000 	.word	0x42470000
 8001b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b8a      	ldr	r3, [pc, #552]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ea      	bne.n	8001b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8097 	beq.w	8001c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b83      	ldr	r3, [pc, #524]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a7e      	ldr	r2, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b79      	ldr	r3, [pc, #484]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7fe ffe5 	bl	8000b5c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7fe ffe1 	bl	8000b5c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e118      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x31e>
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	4a65      	ldr	r2, [pc, #404]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x358>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x340>
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a60      	ldr	r2, [pc, #384]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	4b5e      	ldr	r3, [pc, #376]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a5d      	ldr	r2, [pc, #372]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x358>
 8001bec:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a59      	ldr	r2, [pc, #356]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f023 0304 	bic.w	r3, r3, #4
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d015      	beq.n	8001c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7fe ffa6 	bl	8000b5c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7fe ffa2 	bl	8000b5c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0d7      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ee      	beq.n	8001c14 <HAL_RCC_OscConfig+0x368>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7fe ff90 	bl	8000b5c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7fe ff8c 	bl	8000b5c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0c1      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ee      	bne.n	8001c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a3a      	ldr	r2, [pc, #232]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80ad 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d060      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d145      	bne.n	8001d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7fe ff60 	bl	8000b5c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7fe ff5c 	bl	8000b5c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e093      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	071b      	lsls	r3, r3, #28
 8001cea:	491b      	ldr	r1, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7fe ff31 	bl	8000b5c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe ff2d 	bl	8000b5c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e064      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x452>
 8001d1c:	e05c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7fe ff1a 	bl	8000b5c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7fe ff16 	bl	8000b5c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e04d      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x480>
 8001d4a:	e045      	b.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e040      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_RCC_OscConfig+0x538>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d030      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d129      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d122      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d94:	4013      	ands	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d119      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	3b01      	subs	r3, #1
 8001dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10f      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e03f      	b.n	8001e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fd4a 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2224      	movs	r2, #36	; 0x24
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fe1d 	bl	8002a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b08a      	sub	sp, #40	; 0x28
 8001e86:	af02      	add	r7, sp, #8
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d17c      	bne.n	8001f9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <HAL_UART_Transmit+0x2c>
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e075      	b.n	8001f9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_UART_Transmit+0x3e>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e06e      	b.n	8001f9e <HAL_UART_Transmit+0x11c>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2221      	movs	r2, #33	; 0x21
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ed6:	f7fe fe41 	bl	8000b5c <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	88fa      	ldrh	r2, [r7, #6]
 8001ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	88fa      	ldrh	r2, [r7, #6]
 8001ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef0:	d108      	bne.n	8001f04 <HAL_UART_Transmit+0x82>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d104      	bne.n	8001f04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	e003      	b.n	8001f0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f14:	e02a      	b.n	8001f6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fb9b 	bl	800265c <UART_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e036      	b.n	8001f9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10b      	bne.n	8001f4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	3302      	adds	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e007      	b.n	8001f5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1cf      	bne.n	8001f16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fb6b 	bl	800265c <UART_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b08a      	sub	sp, #40	; 0x28
 8001faa:	af02      	add	r7, sp, #8
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	f040 808c 	bne.w	80020e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_UART_Receive+0x2e>
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e084      	b.n	80020e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_UART_Receive+0x40>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e07d      	b.n	80020e2 <HAL_UART_Receive+0x13c>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2222      	movs	r2, #34	; 0x22
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002002:	f7fe fdab 	bl	8000b5c <HAL_GetTick>
 8002006:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201c:	d108      	bne.n	8002030 <HAL_UART_Receive+0x8a>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d104      	bne.n	8002030 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	e003      	b.n	8002038 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002040:	e043      	b.n	80020ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2200      	movs	r2, #0
 800204a:	2120      	movs	r1, #32
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fb05 	bl	800265c <UART_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e042      	b.n	80020e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	b29b      	uxth	r3, r3
 800206a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206e:	b29a      	uxth	r2, r3
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	3302      	adds	r3, #2
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	e01f      	b.n	80020bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002084:	d007      	beq.n	8002096 <HAL_UART_Receive+0xf0>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <HAL_UART_Receive+0xfe>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e008      	b.n	80020b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1b6      	bne.n	8002042 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0ba      	sub	sp, #232	; 0xe8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800211e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800212a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_UART_IRQHandler+0x66>
 800213e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fbd3 	bl	80028f6 <UART_Receive_IT>
      return;
 8002150:	e256      	b.n	8002600 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80de 	beq.w	8002318 <HAL_UART_IRQHandler+0x22c>
 800215c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800216c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80d1 	beq.w	8002318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_UART_IRQHandler+0xae>
 8002182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800219a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_UART_IRQHandler+0xd2>
 80021a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_UART_IRQHandler+0xf6>
 80021ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d011      	beq.n	8002212 <HAL_UART_IRQHandler+0x126>
 80021ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f043 0208 	orr.w	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 81ed 	beq.w	80025f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800221c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_UART_IRQHandler+0x14e>
 8002228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fb5e 	bl	80028f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_UART_IRQHandler+0x17a>
 800225e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d04f      	beq.n	8002306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fa66 	bl	8002738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	d141      	bne.n	80022fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3314      	adds	r3, #20
 8002280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002288:	e853 3f00 	ldrex	r3, [r3]
 800228c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3314      	adds	r3, #20
 80022a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80022b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022b6:	e841 2300 	strex	r3, r2, [r1]
 80022ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80022be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1d9      	bne.n	800227a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d013      	beq.n	80022f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	4a7d      	ldr	r2, [pc, #500]	; (80024c8 <HAL_UART_IRQHandler+0x3dc>)
 80022d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fdcb 	bl	8000e76 <HAL_DMA_Abort_IT>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022f0:	4610      	mov	r0, r2
 80022f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f4:	e00e      	b.n	8002314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f99a 	bl	8002630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	e00a      	b.n	8002314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f996 	bl	8002630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002304:	e006      	b.n	8002314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f992 	bl	8002630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002312:	e170      	b.n	80025f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002314:	bf00      	nop
    return;
 8002316:	e16e      	b.n	80025f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	2b01      	cmp	r3, #1
 800231e:	f040 814a 	bne.w	80025b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8143 	beq.w	80025b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 813c 	beq.w	80025b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b40      	cmp	r3, #64	; 0x40
 8002360:	f040 80b4 	bne.w	80024cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8140 	beq.w	80025fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800237e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002382:	429a      	cmp	r2, r3
 8002384:	f080 8139 	bcs.w	80025fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800238e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	f000 8088 	beq.w	80024ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ac:	e853 3f00 	ldrex	r3, [r3]
 80023b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80023b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	330c      	adds	r3, #12
 80023c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80023ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80023d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023da:	e841 2300 	strex	r3, r2, [r1]
 80023de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80023e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1d9      	bne.n	800239e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f4:	e853 3f00 	ldrex	r3, [r3]
 80023f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80023fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3314      	adds	r3, #20
 800240a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800240e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002412:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800241a:	e841 2300 	strex	r3, r2, [r1]
 800241e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1e1      	bne.n	80023ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002430:	e853 3f00 	ldrex	r3, [r3]
 8002434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800243c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3314      	adds	r3, #20
 8002446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800244a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800244c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002452:	e841 2300 	strex	r3, r2, [r1]
 8002456:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1e3      	bne.n	8002426 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002476:	e853 3f00 	ldrex	r3, [r3]
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800247c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247e:	f023 0310 	bic.w	r3, r3, #16
 8002482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002490:	65ba      	str	r2, [r7, #88]	; 0x58
 8002492:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002494:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002496:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002498:	e841 2300 	strex	r3, r2, [r1]
 800249c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800249e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e3      	bne.n	800246c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fc74 	bl	8000d96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8c0 	bl	8002644 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024c4:	e099      	b.n	80025fa <HAL_UART_IRQHandler+0x50e>
 80024c6:	bf00      	nop
 80024c8:	080027ff 	.word	0x080027ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 808b 	beq.w	80025fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80024e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8086 	beq.w	80025fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	330c      	adds	r3, #12
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	e853 3f00 	ldrex	r3, [r3]
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002516:	647a      	str	r2, [r7, #68]	; 0x44
 8002518:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800251c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800251e:	e841 2300 	strex	r3, r2, [r1]
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e3      	bne.n	80024f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3314      	adds	r3, #20
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	e853 3f00 	ldrex	r3, [r3]
 8002538:	623b      	str	r3, [r7, #32]
   return(result);
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3314      	adds	r3, #20
 800254a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800254e:	633a      	str	r2, [r7, #48]	; 0x30
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002556:	e841 2300 	strex	r3, r2, [r1]
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1e3      	bne.n	800252a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	e853 3f00 	ldrex	r3, [r3]
 800257e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0310 	bic.w	r3, r3, #16
 8002586:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002594:	61fa      	str	r2, [r7, #28]
 8002596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002598:	69b9      	ldr	r1, [r7, #24]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	e841 2300 	strex	r3, r2, [r1]
 80025a0:	617b      	str	r3, [r7, #20]
   return(result);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e3      	bne.n	8002570 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f848 	bl	8002644 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025b4:	e023      	b.n	80025fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_UART_IRQHandler+0x4ea>
 80025c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f929 	bl	8002826 <UART_Transmit_IT>
    return;
 80025d4:	e014      	b.n	8002600 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00e      	beq.n	8002600 <HAL_UART_IRQHandler+0x514>
 80025e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f969 	bl	80028c6 <UART_EndTransmit_IT>
    return;
 80025f4:	e004      	b.n	8002600 <HAL_UART_IRQHandler+0x514>
    return;
 80025f6:	bf00      	nop
 80025f8:	e002      	b.n	8002600 <HAL_UART_IRQHandler+0x514>
      return;
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <HAL_UART_IRQHandler+0x514>
      return;
 80025fe:	bf00      	nop
  }
}
 8002600:	37e8      	adds	r7, #232	; 0xe8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop

08002608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b090      	sub	sp, #64	; 0x40
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800266c:	e050      	b.n	8002710 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d04c      	beq.n	8002710 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <UART_WaitOnFlagUntilTimeout+0x30>
 800267c:	f7fe fa6e 	bl	8000b5c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002688:	429a      	cmp	r2, r3
 800268a:	d241      	bcs.n	8002710 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	330c      	adds	r3, #12
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	e853 3f00 	ldrex	r3, [r3]
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ac:	637a      	str	r2, [r7, #52]	; 0x34
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e5      	bne.n	800268c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3314      	adds	r3, #20
 80026c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	e853 3f00 	ldrex	r3, [r3]
 80026ce:	613b      	str	r3, [r7, #16]
   return(result);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3314      	adds	r3, #20
 80026de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e0:	623a      	str	r2, [r7, #32]
 80026e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e4:	69f9      	ldr	r1, [r7, #28]
 80026e6:	6a3a      	ldr	r2, [r7, #32]
 80026e8:	e841 2300 	strex	r3, r2, [r1]
 80026ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e5      	bne.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e00f      	b.n	8002730 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	429a      	cmp	r2, r3
 800272c:	d09f      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3740      	adds	r7, #64	; 0x40
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002738:	b480      	push	{r7}
 800273a:	b095      	sub	sp, #84	; 0x54
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	e853 3f00 	ldrex	r3, [r3]
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002760:	643a      	str	r2, [r7, #64]	; 0x40
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e5      	bne.n	8002740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3314      	adds	r3, #20
 800277a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	e853 3f00 	ldrex	r3, [r3]
 8002782:	61fb      	str	r3, [r7, #28]
   return(result);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800279a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279c:	e841 2300 	strex	r3, r2, [r1]
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e5      	bne.n	8002774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d119      	bne.n	80027e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	60bb      	str	r3, [r7, #8]
   return(result);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f023 0310 	bic.w	r3, r3, #16
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027d0:	61ba      	str	r2, [r7, #24]
 80027d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d4:	6979      	ldr	r1, [r7, #20]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	e841 2300 	strex	r3, r2, [r1]
 80027dc:	613b      	str	r3, [r7, #16]
   return(result);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e5      	bne.n	80027b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027f2:	bf00      	nop
 80027f4:	3754      	adds	r7, #84	; 0x54
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff ff09 	bl	8002630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b21      	cmp	r3, #33	; 0x21
 8002838:	d13e      	bne.n	80028b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002842:	d114      	bne.n	800286e <UART_Transmit_IT+0x48>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d110      	bne.n	800286e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002860:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	1c9a      	adds	r2, r3, #2
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	621a      	str	r2, [r3, #32]
 800286c:	e008      	b.n	8002880 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6211      	str	r1, [r2, #32]
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29b      	uxth	r3, r3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4619      	mov	r1, r3
 800288e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fe8e 	bl	8002608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b08c      	sub	sp, #48	; 0x30
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b22      	cmp	r3, #34	; 0x22
 8002908:	f040 80ab 	bne.w	8002a62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002914:	d117      	bne.n	8002946 <UART_Receive_IT+0x50>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d113      	bne.n	8002946 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800291e:	2300      	movs	r3, #0
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002934:	b29a      	uxth	r2, r3
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	1c9a      	adds	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
 8002944:	e026      	b.n	8002994 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d007      	beq.n	800296a <UART_Receive_IT+0x74>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <UART_Receive_IT+0x82>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e008      	b.n	800298a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002984:	b2da      	uxtb	r2, r3
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4619      	mov	r1, r3
 80029a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d15a      	bne.n	8002a5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0220 	bic.w	r2, r2, #32
 80029b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d135      	bne.n	8002a54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	330c      	adds	r3, #12
 80029f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	613b      	str	r3, [r7, #16]
   return(result);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f023 0310 	bic.w	r3, r3, #16
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	623a      	str	r2, [r7, #32]
 8002a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a12:	69f9      	ldr	r1, [r7, #28]
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e5      	bne.n	80029ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d10a      	bne.n	8002a46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fdf9 	bl	8002644 <HAL_UARTEx_RxEventCallback>
 8002a52:	e002      	b.n	8002a5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff fde1 	bl	800261c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e002      	b.n	8002a64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3730      	adds	r7, #48	; 0x30
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a70:	b0c0      	sub	sp, #256	; 0x100
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	68d9      	ldr	r1, [r3, #12]
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	ea40 0301 	orr.w	r3, r0, r1
 8002a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ac4:	f021 010c 	bic.w	r1, r1, #12
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae6:	6999      	ldr	r1, [r3, #24]
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	ea40 0301 	orr.w	r3, r0, r1
 8002af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b8f      	ldr	r3, [pc, #572]	; (8002d38 <UART_SetConfig+0x2cc>)
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d005      	beq.n	8002b0c <UART_SetConfig+0xa0>
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b8d      	ldr	r3, [pc, #564]	; (8002d3c <UART_SetConfig+0x2d0>)
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d104      	bne.n	8002b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b0c:	f7fe fc8a 	bl	8001424 <HAL_RCC_GetPCLK2Freq>
 8002b10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b14:	e003      	b.n	8002b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b16:	f7fe fc71 	bl	80013fc <HAL_RCC_GetPCLK1Freq>
 8002b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b28:	f040 810c 	bne.w	8002d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	1891      	adds	r1, r2, r2
 8002b44:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b46:	415b      	adcs	r3, r3
 8002b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b4e:	4621      	mov	r1, r4
 8002b50:	eb12 0801 	adds.w	r8, r2, r1
 8002b54:	4629      	mov	r1, r5
 8002b56:	eb43 0901 	adc.w	r9, r3, r1
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6e:	4690      	mov	r8, r2
 8002b70:	4699      	mov	r9, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	eb18 0303 	adds.w	r3, r8, r3
 8002b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b7c:	462b      	mov	r3, r5
 8002b7e:	eb49 0303 	adc.w	r3, r9, r3
 8002b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	18db      	adds	r3, r3, r3
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	eb42 0303 	adc.w	r3, r2, r3
 8002ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bb0:	f7fd fb28 	bl	8000204 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <UART_SetConfig+0x2d4>)
 8002bba:	fba3 2302 	umull	r2, r3, r3, r2
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	011c      	lsls	r4, r3, #4
 8002bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	1891      	adds	r1, r2, r2
 8002bda:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bdc:	415b      	adcs	r3, r3
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002be4:	4641      	mov	r1, r8
 8002be6:	eb12 0a01 	adds.w	sl, r2, r1
 8002bea:	4649      	mov	r1, r9
 8002bec:	eb43 0b01 	adc.w	fp, r3, r1
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c04:	4692      	mov	sl, r2
 8002c06:	469b      	mov	fp, r3
 8002c08:	4643      	mov	r3, r8
 8002c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c12:	464b      	mov	r3, r9
 8002c14:	eb4b 0303 	adc.w	r3, fp, r3
 8002c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c30:	460b      	mov	r3, r1
 8002c32:	18db      	adds	r3, r3, r3
 8002c34:	643b      	str	r3, [r7, #64]	; 0x40
 8002c36:	4613      	mov	r3, r2
 8002c38:	eb42 0303 	adc.w	r3, r2, r3
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c46:	f7fd fadd 	bl	8000204 <__aeabi_uldivmod>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4b3b      	ldr	r3, [pc, #236]	; (8002d40 <UART_SetConfig+0x2d4>)
 8002c52:	fba3 2301 	umull	r2, r3, r3, r1
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2264      	movs	r2, #100	; 0x64
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	1acb      	subs	r3, r1, r3
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c66:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <UART_SetConfig+0x2d4>)
 8002c68:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c74:	441c      	add	r4, r3
 8002c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c88:	4642      	mov	r2, r8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	1891      	adds	r1, r2, r2
 8002c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c90:	415b      	adcs	r3, r3
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c98:	4641      	mov	r1, r8
 8002c9a:	1851      	adds	r1, r2, r1
 8002c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	414b      	adcs	r3, r1
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	00cb      	lsls	r3, r1, #3
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cba:	4651      	mov	r1, sl
 8002cbc:	00ca      	lsls	r2, r1, #3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ccc:	464b      	mov	r3, r9
 8002cce:	460a      	mov	r2, r1
 8002cd0:	eb42 0303 	adc.w	r3, r2, r3
 8002cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cec:	460b      	mov	r3, r1
 8002cee:	18db      	adds	r3, r3, r3
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	eb42 0303 	adc.w	r3, r2, r3
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d02:	f7fd fa7f 	bl	8000204 <__aeabi_uldivmod>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <UART_SetConfig+0x2d4>)
 8002d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	2164      	movs	r1, #100	; 0x64
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	3332      	adds	r3, #50	; 0x32
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <UART_SetConfig+0x2d4>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	f003 0207 	and.w	r2, r3, #7
 8002d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4422      	add	r2, r4
 8002d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d34:	e106      	b.n	8002f44 <UART_SetConfig+0x4d8>
 8002d36:	bf00      	nop
 8002d38:	40011000 	.word	0x40011000
 8002d3c:	40011400 	.word	0x40011400
 8002d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d56:	4642      	mov	r2, r8
 8002d58:	464b      	mov	r3, r9
 8002d5a:	1891      	adds	r1, r2, r2
 8002d5c:	6239      	str	r1, [r7, #32]
 8002d5e:	415b      	adcs	r3, r3
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d66:	4641      	mov	r1, r8
 8002d68:	1854      	adds	r4, r2, r1
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	eb43 0501 	adc.w	r5, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	00eb      	lsls	r3, r5, #3
 8002d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7e:	00e2      	lsls	r2, r4, #3
 8002d80:	4614      	mov	r4, r2
 8002d82:	461d      	mov	r5, r3
 8002d84:	4643      	mov	r3, r8
 8002d86:	18e3      	adds	r3, r4, r3
 8002d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	eb45 0303 	adc.w	r3, r5, r3
 8002d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002da2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002db2:	4629      	mov	r1, r5
 8002db4:	008b      	lsls	r3, r1, #2
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	008a      	lsls	r2, r1, #2
 8002dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dc4:	f7fd fa1e 	bl	8000204 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <UART_SetConfig+0x4e4>)
 8002dce:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	011c      	lsls	r4, r3, #4
 8002dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	61b9      	str	r1, [r7, #24]
 8002df0:	415b      	adcs	r3, r3
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df8:	4641      	mov	r1, r8
 8002dfa:	1851      	adds	r1, r2, r1
 8002dfc:	6139      	str	r1, [r7, #16]
 8002dfe:	4649      	mov	r1, r9
 8002e00:	414b      	adcs	r3, r1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e10:	4659      	mov	r1, fp
 8002e12:	00cb      	lsls	r3, r1, #3
 8002e14:	4651      	mov	r1, sl
 8002e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	00ca      	lsls	r2, r1, #3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4642      	mov	r2, r8
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	460a      	mov	r2, r1
 8002e30:	eb42 0303 	adc.w	r3, r2, r3
 8002e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e50:	4649      	mov	r1, r9
 8002e52:	008b      	lsls	r3, r1, #2
 8002e54:	4641      	mov	r1, r8
 8002e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	008a      	lsls	r2, r1, #2
 8002e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e62:	f7fd f9cf 	bl	8000204 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <UART_SetConfig+0x4e4>)
 8002e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2264      	movs	r2, #100	; 0x64
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	1acb      	subs	r3, r1, r3
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	3332      	adds	r3, #50	; 0x32
 8002e80:	4a33      	ldr	r2, [pc, #204]	; (8002f50 <UART_SetConfig+0x4e4>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8c:	441c      	add	r4, r3
 8002e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e92:	2200      	movs	r2, #0
 8002e94:	673b      	str	r3, [r7, #112]	; 0x70
 8002e96:	677a      	str	r2, [r7, #116]	; 0x74
 8002e98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1891      	adds	r1, r2, r2
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	415b      	adcs	r3, r3
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eac:	4641      	mov	r1, r8
 8002eae:	1851      	adds	r1, r2, r1
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	414b      	adcs	r3, r1
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	00cb      	lsls	r3, r1, #3
 8002ec8:	4651      	mov	r1, sl
 8002eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ece:	4651      	mov	r1, sl
 8002ed0:	00ca      	lsls	r2, r1, #3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4642      	mov	r2, r8
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ede:	464b      	mov	r3, r9
 8002ee0:	460a      	mov	r2, r1
 8002ee2:	eb42 0303 	adc.w	r3, r2, r3
 8002ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef2:	667a      	str	r2, [r7, #100]	; 0x64
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f00:	4649      	mov	r1, r9
 8002f02:	008b      	lsls	r3, r1, #2
 8002f04:	4641      	mov	r1, r8
 8002f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	008a      	lsls	r2, r1, #2
 8002f0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f12:	f7fd f977 	bl	8000204 <__aeabi_uldivmod>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <UART_SetConfig+0x4e4>)
 8002f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	2164      	movs	r1, #100	; 0x64
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	3332      	adds	r3, #50	; 0x32
 8002f2e:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <UART_SetConfig+0x4e4>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4422      	add	r2, r4
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	bf00      	nop
 8002f46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f50:	51eb851f 	.word	0x51eb851f

08002f54 <memset>:
 8002f54:	4402      	add	r2, r0
 8002f56:	4603      	mov	r3, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <__libc_init_array>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	4d0d      	ldr	r5, [pc, #52]	; (8002f9c <__libc_init_array+0x38>)
 8002f68:	4c0d      	ldr	r4, [pc, #52]	; (8002fa0 <__libc_init_array+0x3c>)
 8002f6a:	1b64      	subs	r4, r4, r5
 8002f6c:	10a4      	asrs	r4, r4, #2
 8002f6e:	2600      	movs	r6, #0
 8002f70:	42a6      	cmp	r6, r4
 8002f72:	d109      	bne.n	8002f88 <__libc_init_array+0x24>
 8002f74:	4d0b      	ldr	r5, [pc, #44]	; (8002fa4 <__libc_init_array+0x40>)
 8002f76:	4c0c      	ldr	r4, [pc, #48]	; (8002fa8 <__libc_init_array+0x44>)
 8002f78:	f000 f818 	bl	8002fac <_init>
 8002f7c:	1b64      	subs	r4, r4, r5
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	2600      	movs	r6, #0
 8002f82:	42a6      	cmp	r6, r4
 8002f84:	d105      	bne.n	8002f92 <__libc_init_array+0x2e>
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
 8002f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8c:	4798      	blx	r3
 8002f8e:	3601      	adds	r6, #1
 8002f90:	e7ee      	b.n	8002f70 <__libc_init_array+0xc>
 8002f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f96:	4798      	blx	r3
 8002f98:	3601      	adds	r6, #1
 8002f9a:	e7f2      	b.n	8002f82 <__libc_init_array+0x1e>
 8002f9c:	08002fec 	.word	0x08002fec
 8002fa0:	08002fec 	.word	0x08002fec
 8002fa4:	08002fec 	.word	0x08002fec
 8002fa8:	08002ff0 	.word	0x08002ff0

08002fac <_init>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	bf00      	nop
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_fini>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr
