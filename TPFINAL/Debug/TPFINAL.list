
TPFINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b8  080047b8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c0  080047c0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080047c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000024  080047ec  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080047ec  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e302  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002860  00000000  00000000  0002e399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  00030c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  000317d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002305d  00000000  00000000  000320f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013424  00000000  00000000  00055154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cafa6  00000000  00000000  00068578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f40  00000000  00000000  00133520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00136460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004570 	.word	0x08004570

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08004570 	.word	0x08004570

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f91a 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f808 	bl	8000530 <SystemClock_Config>
  init_perifericos_app();
 8000520:	f000 f9dd 	bl	80008de <init_perifericos_app>
  FSM_init();
 8000524:	f000 fa06 	bl	8000934 <FSM_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  FSM_update();
 8000528:	f000 fa10 	bl	800094c <FSM_update>
 800052c:	e7fc      	b.n	8000528 <main+0x14>
	...

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2234      	movs	r2, #52	; 0x34
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 ffdc 	bl	80044fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <SystemClock_Config+0xd4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a29      	ldr	r2, [pc, #164]	; (8000604 <SystemClock_Config+0xd4>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <SystemClock_Config+0xd4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <SystemClock_Config+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057c:	4a22      	ldr	r2, [pc, #136]	; (8000608 <SystemClock_Config+0xd8>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <SystemClock_Config+0xd8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a4:	2310      	movs	r3, #16
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fc82 	bl	8002ec8 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ca:	f000 f81f 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f922 	bl	8002834 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005f6:	f000 f809 	bl	800060c <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <HAL_MspInit+0x4c>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <HAL_MspInit+0x4c>)
 8000628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062c:	6453      	str	r3, [r2, #68]	; 0x44
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <HAL_MspInit+0x4c>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_MspInit+0x4c>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_MspInit+0x4c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_MspInit+0x4c>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000656:	2007      	movs	r0, #7
 8000658:	f001 f9e0 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800

08000668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <HAL_I2C_MspInit+0x84>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d12c      	bne.n	80006e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_I2C_MspInit+0x88>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <HAL_I2C_MspInit+0x88>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_I2C_MspInit+0x88>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ac:	2312      	movs	r3, #18
 80006ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b8:	2304      	movs	r3, #4
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <HAL_I2C_MspInit+0x8c>)
 80006c4:	f001 fa8a 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_I2C_MspInit+0x88>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_I2C_MspInit+0x88>)
 80006d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_I2C_MspInit+0x88>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40005400 	.word	0x40005400
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020400 	.word	0x40020400

080006f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a36      	ldr	r2, [pc, #216]	; (80007f0 <HAL_UART_MspInit+0xf8>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d134      	bne.n	8000784 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a34      	ldr	r2, [pc, #208]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 8000724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a2d      	ldr	r2, [pc, #180]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000752:	2303      	movs	r3, #3
 8000754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000762:	2308      	movs	r3, #8
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4822      	ldr	r0, [pc, #136]	; (80007f8 <HAL_UART_MspInit+0x100>)
 800076e:	f001 fa35 	bl	8001bdc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2034      	movs	r0, #52	; 0x34
 8000778:	f001 f95b 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800077c:	2034      	movs	r0, #52	; 0x34
 800077e:	f001 f974 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000782:	e030      	b.n	80007e6 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <HAL_UART_MspInit+0x104>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d12b      	bne.n	80007e6 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_UART_MspInit+0xfc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007c6:	230c      	movs	r3, #12
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d6:	2307      	movs	r3, #7
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <HAL_UART_MspInit+0x100>)
 80007e2:	f001 f9fb 	bl	8001bdc <HAL_GPIO_Init>
}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	; 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40004c00 	.word	0x40004c00
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40004400 	.word	0x40004400

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 ffd2 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <UART4_IRQHandler+0x10>)
 800085a:	f002 ff1b 	bl	8003694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000a0 	.word	0x200000a0

08000868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000892:	490e      	ldr	r1, [pc, #56]	; (80008cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a8:	4c0b      	ldr	r4, [pc, #44]	; (80008d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008b6:	f7ff ffd7 	bl	8000868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f003 fe27 	bl	800450c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008be:	f7ff fe29 	bl	8000514 <main>
  bx  lr    
 80008c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80008d0:	080047c8 	.word	0x080047c8
  ldr r2, =_sbss
 80008d4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80008d8:	20000130 	.word	0x20000130

080008dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC_IRQHandler>

080008de <init_perifericos_app>:
static fsm_state_t estado_actual; //Variable que llevara el estado actual de la FSM
uint8_t ascii_format[length_tiempo];//Variable para imprimir segundos transcurridos

//Inicia perifericos necesarios para la aplicacion
void init_perifericos_app(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
	keypad_init();
 80008e2:	f000 fb2f 	bl	8000f44 <keypad_init>
	sensor_init();
 80008e6:	f000 fe33 	bl	8001550 <sensor_init>
	alarma_init_gpio();
 80008ea:	f000 fe73 	bl	80015d4 <alarma_init_gpio>
	HAL_Delay(100);
 80008ee:	2064      	movs	r0, #100	; 0x64
 80008f0:	f000 ffa0 	bl	8001834 <HAL_Delay>
	while(!(init_terminal()));
 80008f4:	bf00      	nop
 80008f6:	f000 fea5 	bl	8001644 <init_terminal>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f083 0301 	eor.w	r3, r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f7      	bne.n	80008f6 <init_perifericos_app+0x18>
	HAL_Delay(100);
 8000906:	2064      	movs	r0, #100	; 0x64
 8000908:	f000 ff94 	bl	8001834 <HAL_Delay>
	while(!(init_sensor()));
 800090c:	bf00      	nop
 800090e:	f000 fdd3 	bl	80014b8 <init_sensor>
 8000912:	4603      	mov	r3, r0
 8000914:	f083 0301 	eor.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1f7      	bne.n	800090e <init_perifericos_app+0x30>
	HAL_Delay(100);
 800091e:	2064      	movs	r0, #100	; 0x64
 8000920:	f000 ff88 	bl	8001834 <HAL_Delay>
	INIT_LCD();
 8000924:	f000 fcfa 	bl	800131c <INIT_LCD>
	HAL_Delay(100);
 8000928:	2064      	movs	r0, #100	; 0x64
 800092a:	f000 ff83 	bl	8001834 <HAL_Delay>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <FSM_init>:

void FSM_init(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	estado_actual=DESARMADO_OK;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <FSM_init+0x14>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	20000040 	.word	0x20000040

0800094c <FSM_update>:

void FSM_update(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b090      	sub	sp, #64	; 0x40
 8000950:	af00      	add	r7, sp, #0
	switch(estado_actual)
 8000952:	4b9f      	ldr	r3, [pc, #636]	; (8000bd0 <FSM_update+0x284>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b04      	cmp	r3, #4
 8000958:	f200 81ea 	bhi.w	8000d30 <FSM_update+0x3e4>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <FSM_update+0x18>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000979 	.word	0x08000979
 8000968:	08000a7f 	.word	0x08000a7f
 800096c:	08000b11 	.word	0x08000b11
 8000970:	08000b7f 	.word	0x08000b7f
 8000974:	08000d0d 	.word	0x08000d0d
	{
	case DESARMADO_OK:
		enviar_msg_terminal((uint8_t *)"ESTADO ACTUAL: Desarmado_ok \r\n");
 8000978:	4896      	ldr	r0, [pc, #600]	; (8000bd4 <FSM_update+0x288>)
 800097a:	f000 fea7 	bl	80016cc <enviar_msg_terminal>
		CLEAR_LCD();
 800097e:	f000 fce9 	bl	8001354 <CLEAR_LCD>
		LCD_XY(LCD_LINEA1,POS_1);
 8000982:	2101      	movs	r1, #1
 8000984:	2080      	movs	r0, #128	; 0x80
 8000986:	f000 fd76 	bl	8001476 <LCD_XY>
		STRING_LCD((uint8_t *)"Ingrese PIN: ");
 800098a:	4893      	ldr	r0, [pc, #588]	; (8000bd8 <FSM_update+0x28c>)
 800098c:	f000 fd5e 	bl	800144c <STRING_LCD>
		uint8_t contador=0;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint8_t clave_ingresada[PIN_SIZE + 1]="";
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	2300      	movs	r3, #0
 800099c:	733b      	strb	r3, [r7, #12]
		uint8_t *ptro_teclado=clave_ingresada;
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
		uint8_t tecla;
		LCD_XY(LCD_LINEA2,POS_4);
 80009a4:	2104      	movs	r1, #4
 80009a6:	20c0      	movs	r0, #192	; 0xc0
 80009a8:	f000 fd65 	bl	8001476 <LCD_XY>
		while(contador < PIN_SIZE)
 80009ac:	e014      	b.n	80009d8 <FSM_update+0x8c>
		{
			tecla=keypad_read();
 80009ae:	f000 fb2d 	bl	800100c <keypad_read>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]

			if(tecla != '\0')
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00d      	beq.n	80009d8 <FSM_update+0x8c>
			{
				*ptro_teclado = tecla;
 80009bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	701a      	strb	r2, [r3, #0]
				contador++;
 80009c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80009c6:	3301      	adds	r3, #1
 80009c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				ptro_teclado++;
 80009cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ce:	3301      	adds	r3, #1
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
				STRING_LCD((uint8_t *)"*");
 80009d2:	4882      	ldr	r0, [pc, #520]	; (8000bdc <FSM_update+0x290>)
 80009d4:	f000 fd3a 	bl	800144c <STRING_LCD>
		while(contador < PIN_SIZE)
 80009d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d9e6      	bls.n	80009ae <FSM_update+0x62>

			}
		}
		*ptro_teclado= '\0';
 80009e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
		enviar_msg_terminal((uint8_t *)"Clave Ingresada: ");
 80009e6:	487e      	ldr	r0, [pc, #504]	; (8000be0 <FSM_update+0x294>)
 80009e8:	f000 fe70 	bl	80016cc <enviar_msg_terminal>
		enviar_msg_terminal((uint8_t *)clave_ingresada);
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fe6b 	bl	80016cc <enviar_msg_terminal>
		enviar_msg_terminal((uint8_t *)"\r\n");
 80009f6:	487b      	ldr	r0, [pc, #492]	; (8000be4 <FSM_update+0x298>)
 80009f8:	f000 fe68 	bl	80016cc <enviar_msg_terminal>
		if (strcmp((const char *)clave_ingresada,(const char *) clave) == 0)
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	4979      	ldr	r1, [pc, #484]	; (8000be8 <FSM_update+0x29c>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fbfe 	bl	8000204 <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d11b      	bne.n	8000a46 <FSM_update+0xfa>
		{
			enviar_msg_terminal((uint8_t *)"Clave correcta \r\n");
 8000a0e:	4877      	ldr	r0, [pc, #476]	; (8000bec <FSM_update+0x2a0>)
 8000a10:	f000 fe5c 	bl	80016cc <enviar_msg_terminal>
			CLEAR_LCD();
 8000a14:	f000 fc9e 	bl	8001354 <CLEAR_LCD>
			LCD_XY(LCD_LINEA1,POS_1);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2080      	movs	r0, #128	; 0x80
 8000a1c:	f000 fd2b 	bl	8001476 <LCD_XY>
			STRING_LCD((uint8_t *)"Clave correcta");
 8000a20:	4873      	ldr	r0, [pc, #460]	; (8000bf0 <FSM_update+0x2a4>)
 8000a22:	f000 fd13 	bl	800144c <STRING_LCD>
			uint32_t start_time = HAL_GetTick();//Actualizacion de tiempo
 8000a26:	f000 fef9 	bl	800181c <HAL_GetTick>
 8000a2a:	6138      	str	r0, [r7, #16]
			while (HAL_GetTick() - start_time < TIEMPO_TRANSITION) {}; //No bloqueante
 8000a2c:	bf00      	nop
 8000a2e:	f000 fef5 	bl	800181c <HAL_GetTick>
 8000a32:	4602      	mov	r2, r0
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000a3c:	d3f7      	bcc.n	8000a2e <FSM_update+0xe2>
			estado_actual=ARMANDO;
 8000a3e:	4b64      	ldr	r3, [pc, #400]	; (8000bd0 <FSM_update+0x284>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
			STRING_LCD((uint8_t *)"Clave incorrecta");
			uint32_t start_time = HAL_GetTick();//Actualizacion de tiempo
			while (HAL_GetTick() - start_time < TIEMPO_TRANSITION) {}; //No bloqueante
			estado_actual=DESARMADO_OK;
		}
		break;
 8000a44:	e178      	b.n	8000d38 <FSM_update+0x3ec>
			enviar_msg_terminal((uint8_t *)"Clave Incorrecta \r\n");
 8000a46:	486b      	ldr	r0, [pc, #428]	; (8000bf4 <FSM_update+0x2a8>)
 8000a48:	f000 fe40 	bl	80016cc <enviar_msg_terminal>
			CLEAR_LCD();
 8000a4c:	f000 fc82 	bl	8001354 <CLEAR_LCD>
			LCD_XY(LCD_LINEA1,POS_0);
 8000a50:	2100      	movs	r1, #0
 8000a52:	2080      	movs	r0, #128	; 0x80
 8000a54:	f000 fd0f 	bl	8001476 <LCD_XY>
			STRING_LCD((uint8_t *)"Clave incorrecta");
 8000a58:	4867      	ldr	r0, [pc, #412]	; (8000bf8 <FSM_update+0x2ac>)
 8000a5a:	f000 fcf7 	bl	800144c <STRING_LCD>
			uint32_t start_time = HAL_GetTick();//Actualizacion de tiempo
 8000a5e:	f000 fedd 	bl	800181c <HAL_GetTick>
 8000a62:	6178      	str	r0, [r7, #20]
			while (HAL_GetTick() - start_time < TIEMPO_TRANSITION) {}; //No bloqueante
 8000a64:	bf00      	nop
 8000a66:	f000 fed9 	bl	800181c <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000a74:	d3f7      	bcc.n	8000a66 <FSM_update+0x11a>
			estado_actual=DESARMADO_OK;
 8000a76:	4b56      	ldr	r3, [pc, #344]	; (8000bd0 <FSM_update+0x284>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
		break;
 8000a7c:	e15c      	b.n	8000d38 <FSM_update+0x3ec>
	case ARMANDO:
		enviar_msg_terminal((uint8_t *)"ARMANDO ALARMA...\r\n");
 8000a7e:	485f      	ldr	r0, [pc, #380]	; (8000bfc <FSM_update+0x2b0>)
 8000a80:	f000 fe24 	bl	80016cc <enviar_msg_terminal>
		CLEAR_LCD();
 8000a84:	f000 fc66 	bl	8001354 <CLEAR_LCD>
		for(uint8_t i=0 ; i < TIEMPO_GUARDA; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a8e:	e028      	b.n	8000ae2 <FSM_update+0x196>
		{
			uint8_t tiempo_temp=TIEMPO_GUARDA-i; //Actualizacion de la variable i que lleva el numero de iteracion
 8000a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a94:	f1c3 030f 	rsb	r3, r3, #15
 8000a98:	77fb      	strb	r3, [r7, #31]
			int_to_ascii(tiempo_temp,ascii_format);// Conversion a formato ascii
 8000a9a:	7ffb      	ldrb	r3, [r7, #31]
 8000a9c:	4958      	ldr	r1, [pc, #352]	; (8000c00 <FSM_update+0x2b4>)
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f962 	bl	8000d68 <int_to_ascii>
			uint32_t start_time = HAL_GetTick();//Actualizacion de tiempo
 8000aa4:	f000 feba 	bl	800181c <HAL_GetTick>
 8000aa8:	61b8      	str	r0, [r7, #24]
			while (HAL_GetTick() - start_time < one_second) {
 8000aaa:	e00d      	b.n	8000ac8 <FSM_update+0x17c>
				LCD_XY(LCD_LINEA1,POS_0);
 8000aac:	2100      	movs	r1, #0
 8000aae:	2080      	movs	r0, #128	; 0x80
 8000ab0:	f000 fce1 	bl	8001476 <LCD_XY>
				STRING_LCD((uint8_t *)"Tiempo de armado: ");
 8000ab4:	4853      	ldr	r0, [pc, #332]	; (8000c04 <FSM_update+0x2b8>)
 8000ab6:	f000 fcc9 	bl	800144c <STRING_LCD>
				LCD_XY(LCD_LINEA2,POS_5);
 8000aba:	2105      	movs	r1, #5
 8000abc:	20c0      	movs	r0, #192	; 0xc0
 8000abe:	f000 fcda 	bl	8001476 <LCD_XY>
				STRING_LCD((uint8_t *)ascii_format);
 8000ac2:	484f      	ldr	r0, [pc, #316]	; (8000c00 <FSM_update+0x2b4>)
 8000ac4:	f000 fcc2 	bl	800144c <STRING_LCD>
			while (HAL_GetTick() - start_time < one_second) {
 8000ac8:	f000 fea8 	bl	800181c <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ad6:	d3e9      	bcc.n	8000aac <FSM_update+0x160>
		for(uint8_t i=0 ; i < TIEMPO_GUARDA; i++)
 8000ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000adc:	3301      	adds	r3, #1
 8000ade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ae6:	2b0e      	cmp	r3, #14
 8000ae8:	d9d2      	bls.n	8000a90 <FSM_update+0x144>
			};
		}
		estado_actual=ARMADO_OK;
 8000aea:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <FSM_update+0x284>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	701a      	strb	r2, [r3, #0]
		uint32_t start_time = HAL_GetTick();//Actualizacion de tiempo
 8000af0:	f000 fe94 	bl	800181c <HAL_GetTick>
 8000af4:	62f8      	str	r0, [r7, #44]	; 0x2c
		while (HAL_GetTick() - start_time < TIEMPO_TRANSITION)
 8000af6:	e002      	b.n	8000afe <FSM_update+0x1b2>
		{
			enviar_msg_terminal((uint8_t *)"ALARMA ARMADA...\r\n");
 8000af8:	4843      	ldr	r0, [pc, #268]	; (8000c08 <FSM_update+0x2bc>)
 8000afa:	f000 fde7 	bl	80016cc <enviar_msg_terminal>
		while (HAL_GetTick() - start_time < TIEMPO_TRANSITION)
 8000afe:	f000 fe8d 	bl	800181c <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b0c:	d3f4      	bcc.n	8000af8 <FSM_update+0x1ac>
		}
		break;
 8000b0e:	e113      	b.n	8000d38 <FSM_update+0x3ec>
	case ARMADO_OK:
		enviar_msg_terminal((uint8_t *)"ESTADO ACTUAL: ARMADO_OK \r\n");
 8000b10:	483e      	ldr	r0, [pc, #248]	; (8000c0c <FSM_update+0x2c0>)
 8000b12:	f000 fddb 	bl	80016cc <enviar_msg_terminal>
		CLEAR_LCD();
 8000b16:	f000 fc1d 	bl	8001354 <CLEAR_LCD>
		LCD_XY(LCD_LINEA1,POS_0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2080      	movs	r0, #128	; 0x80
 8000b1e:	f000 fcaa 	bl	8001476 <LCD_XY>
		STRING_LCD((uint8_t *)"Alarma ON");
 8000b22:	483b      	ldr	r0, [pc, #236]	; (8000c10 <FSM_update+0x2c4>)
 8000b24:	f000 fc92 	bl	800144c <STRING_LCD>
		if(detectar_presencia())
 8000b28:	f000 fd3e 	bl	80015a8 <detectar_presencia>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00f      	beq.n	8000b52 <FSM_update+0x206>
		{
			enviar_msg_terminal((uint8_t *)"Se ha detectado una persona...\r\n");
 8000b32:	4838      	ldr	r0, [pc, #224]	; (8000c14 <FSM_update+0x2c8>)
 8000b34:	f000 fdca 	bl	80016cc <enviar_msg_terminal>
			CLEAR_LCD();
 8000b38:	f000 fc0c 	bl	8001354 <CLEAR_LCD>
			LCD_XY(LCD_LINEA1,POS_0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2080      	movs	r0, #128	; 0x80
 8000b40:	f000 fc99 	bl	8001476 <LCD_XY>
			STRING_LCD((uint8_t *)"PRESENCIA: ON");
 8000b44:	4834      	ldr	r0, [pc, #208]	; (8000c18 <FSM_update+0x2cc>)
 8000b46:	f000 fc81 	bl	800144c <STRING_LCD>
			estado_actual=DESARMANDO;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <FSM_update+0x284>)
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e008      	b.n	8000b64 <FSM_update+0x218>
		}
		else
		{
			CLEAR_LCD();
 8000b52:	f000 fbff 	bl	8001354 <CLEAR_LCD>
			LCD_XY(LCD_LINEA1,POS_0);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	f000 fc8c 	bl	8001476 <LCD_XY>
			STRING_LCD((uint8_t *)"PRESENCIA: OFF");
 8000b5e:	482f      	ldr	r0, [pc, #188]	; (8000c1c <FSM_update+0x2d0>)
 8000b60:	f000 fc74 	bl	800144c <STRING_LCD>
		}
		start_time = HAL_GetTick();//Actualizacion de tiempo
 8000b64:	f000 fe5a 	bl	800181c <HAL_GetTick>
 8000b68:	62f8      	str	r0, [r7, #44]	; 0x2c
		while (HAL_GetTick() - start_time < one_second){};
 8000b6a:	bf00      	nop
 8000b6c:	f000 fe56 	bl	800181c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b7a:	d3f7      	bcc.n	8000b6c <FSM_update+0x220>
		break;
 8000b7c:	e0dc      	b.n	8000d38 <FSM_update+0x3ec>

	case DESARMANDO:
		start_time= HAL_GetTick();
 8000b7e:	f000 fe4d 	bl	800181c <HAL_GetTick>
 8000b82:	62f8      	str	r0, [r7, #44]	; 0x2c
		while (HAL_GetTick() - start_time < one_second)
 8000b84:	e002      	b.n	8000b8c <FSM_update+0x240>
		{
			enviar_msg_terminal((uint8_t *)"Posible Intruso...\r\n");
 8000b86:	4826      	ldr	r0, [pc, #152]	; (8000c20 <FSM_update+0x2d4>)
 8000b88:	f000 fda0 	bl	80016cc <enviar_msg_terminal>
		while (HAL_GetTick() - start_time < one_second)
 8000b8c:	f000 fe46 	bl	800181c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b9a:	d3f4      	bcc.n	8000b86 <FSM_update+0x23a>
		}
		CLEAR_LCD();
 8000b9c:	f000 fbda 	bl	8001354 <CLEAR_LCD>
		LCD_XY(LCD_LINEA1,POS_1);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2080      	movs	r0, #128	; 0x80
 8000ba4:	f000 fc67 	bl	8001476 <LCD_XY>
		STRING_LCD((uint8_t *)"Identifiquese: ");
 8000ba8:	481e      	ldr	r0, [pc, #120]	; (8000c24 <FSM_update+0x2d8>)
 8000baa:	f000 fc4f 	bl	800144c <STRING_LCD>
		contador=0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint8_t clave_desbloqueo[PIN_SIZE + 1]="";
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	713b      	strb	r3, [r7, #4]
		uint8_t *ptro_desbloqueo=clave_desbloqueo;
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
		uint8_t tecla_desbloqueo;
		LCD_XY(LCD_LINEA2,POS_4);
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	20c0      	movs	r0, #192	; 0xc0
 8000bc4:	f000 fc57 	bl	8001476 <LCD_XY>
		start_time= HAL_GetTick();
 8000bc8:	f000 fe28 	bl	800181c <HAL_GetTick>
 8000bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
		while(contador < PIN_SIZE && (HAL_GetTick() - start_time < TIEMPO_IDENTIFICACION) )
 8000bce:	e043      	b.n	8000c58 <FSM_update+0x30c>
 8000bd0:	20000040 	.word	0x20000040
 8000bd4:	08004588 	.word	0x08004588
 8000bd8:	080045a8 	.word	0x080045a8
 8000bdc:	080045b8 	.word	0x080045b8
 8000be0:	080045bc 	.word	0x080045bc
 8000be4:	080045d0 	.word	0x080045d0
 8000be8:	20000004 	.word	0x20000004
 8000bec:	080045d4 	.word	0x080045d4
 8000bf0:	080045e8 	.word	0x080045e8
 8000bf4:	080045f8 	.word	0x080045f8
 8000bf8:	0800460c 	.word	0x0800460c
 8000bfc:	08004620 	.word	0x08004620
 8000c00:	20000044 	.word	0x20000044
 8000c04:	08004634 	.word	0x08004634
 8000c08:	08004648 	.word	0x08004648
 8000c0c:	0800465c 	.word	0x0800465c
 8000c10:	08004678 	.word	0x08004678
 8000c14:	08004684 	.word	0x08004684
 8000c18:	080046a8 	.word	0x080046a8
 8000c1c:	080046b8 	.word	0x080046b8
 8000c20:	080046c8 	.word	0x080046c8
 8000c24:	080046e0 	.word	0x080046e0
		{
			tecla_desbloqueo=keypad_read();
 8000c28:	f000 f9f0 	bl	800100c <keypad_read>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			if(tecla_desbloqueo != '\0')
 8000c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00e      	beq.n	8000c58 <FSM_update+0x30c>
			{
				*ptro_desbloqueo = tecla_desbloqueo;
 8000c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000c40:	701a      	strb	r2, [r3, #0]
				contador++;
 8000c42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c46:	3301      	adds	r3, #1
 8000c48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				ptro_desbloqueo++;
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4e:	3301      	adds	r3, #1
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
				STRING_LCD((uint8_t *)"*");
 8000c52:	483b      	ldr	r0, [pc, #236]	; (8000d40 <FSM_update+0x3f4>)
 8000c54:	f000 fbfa 	bl	800144c <STRING_LCD>
		while(contador < PIN_SIZE && (HAL_GetTick() - start_time < TIEMPO_IDENTIFICACION) )
 8000c58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d808      	bhi.n	8000c72 <FSM_update+0x326>
 8000c60:	f000 fddc 	bl	800181c <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d9da      	bls.n	8000c28 <FSM_update+0x2dc>

			}
		}
		*ptro_desbloqueo= '\0';
 8000c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
		enviar_msg_terminal((uint8_t *)"Clave Ingresada: ");
 8000c78:	4832      	ldr	r0, [pc, #200]	; (8000d44 <FSM_update+0x3f8>)
 8000c7a:	f000 fd27 	bl	80016cc <enviar_msg_terminal>
		enviar_msg_terminal((uint8_t *)clave_desbloqueo);
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fd23 	bl	80016cc <enviar_msg_terminal>
		enviar_msg_terminal((uint8_t *)"\r\n");
 8000c86:	4830      	ldr	r0, [pc, #192]	; (8000d48 <FSM_update+0x3fc>)
 8000c88:	f000 fd20 	bl	80016cc <enviar_msg_terminal>


		if (strcmp((const char *)clave_desbloqueo,(const char *) clave) == 0)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	492f      	ldr	r1, [pc, #188]	; (8000d4c <FSM_update+0x400>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fab7 	bl	8000204 <strcmp>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11b      	bne.n	8000cd4 <FSM_update+0x388>
		{
			enviar_msg_terminal((uint8_t *)"Clave correcta \r\n");
 8000c9c:	482c      	ldr	r0, [pc, #176]	; (8000d50 <FSM_update+0x404>)
 8000c9e:	f000 fd15 	bl	80016cc <enviar_msg_terminal>
			CLEAR_LCD();
 8000ca2:	f000 fb57 	bl	8001354 <CLEAR_LCD>
			LCD_XY(LCD_LINEA1,POS_1);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	f000 fbe4 	bl	8001476 <LCD_XY>
			STRING_LCD((uint8_t *)"Alarma OFF");
 8000cae:	4829      	ldr	r0, [pc, #164]	; (8000d54 <FSM_update+0x408>)
 8000cb0:	f000 fbcc 	bl	800144c <STRING_LCD>
			uint32_t start_time = HAL_GetTick();//Actualizacion de tiempo
 8000cb4:	f000 fdb2 	bl	800181c <HAL_GetTick>
 8000cb8:	6238      	str	r0, [r7, #32]
			while (HAL_GetTick() - start_time < TIEMPO_TRANSITION) {}; //No bloqueante
 8000cba:	bf00      	nop
 8000cbc:	f000 fdae 	bl	800181c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000cca:	d3f7      	bcc.n	8000cbc <FSM_update+0x370>
			estado_actual=DESARMADO_OK;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <FSM_update+0x40c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
			while (HAL_GetTick() - start_time < TIEMPO_TRANSITION) {}; //No bloqueante
			estado_actual=INTRUSO;
		}


		break;
 8000cd2:	e031      	b.n	8000d38 <FSM_update+0x3ec>
			enviar_msg_terminal((uint8_t *)"Clave Incorrecta \r\n");
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <FSM_update+0x410>)
 8000cd6:	f000 fcf9 	bl	80016cc <enviar_msg_terminal>
			CLEAR_LCD();
 8000cda:	f000 fb3b 	bl	8001354 <CLEAR_LCD>
			LCD_XY(LCD_LINEA1,POS_2);
 8000cde:	2102      	movs	r1, #2
 8000ce0:	2080      	movs	r0, #128	; 0x80
 8000ce2:	f000 fbc8 	bl	8001476 <LCD_XY>
			STRING_LCD((uint8_t *)"INTRUSO!!!");
 8000ce6:	481e      	ldr	r0, [pc, #120]	; (8000d60 <FSM_update+0x414>)
 8000ce8:	f000 fbb0 	bl	800144c <STRING_LCD>
			uint32_t start_time = HAL_GetTick();//Actualizacion de tiempo
 8000cec:	f000 fd96 	bl	800181c <HAL_GetTick>
 8000cf0:	6278      	str	r0, [r7, #36]	; 0x24
			while (HAL_GetTick() - start_time < TIEMPO_TRANSITION) {}; //No bloqueante
 8000cf2:	bf00      	nop
 8000cf4:	f000 fd92 	bl	800181c <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d02:	d3f7      	bcc.n	8000cf4 <FSM_update+0x3a8>
			estado_actual=INTRUSO;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <FSM_update+0x40c>)
 8000d06:	2204      	movs	r2, #4
 8000d08:	701a      	strb	r2, [r3, #0]
		break;
 8000d0a:	e015      	b.n	8000d38 <FSM_update+0x3ec>
	case INTRUSO:
		alarma_on();
 8000d0c:	f000 fc90 	bl	8001630 <alarma_on>
		enviar_msg_terminal((uint8_t *)"Estado Actual: Intruso...\r\n");
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <FSM_update+0x418>)
 8000d12:	f000 fcdb 	bl	80016cc <enviar_msg_terminal>
		start_time = HAL_GetTick();//Actualizacion de tiempo
 8000d16:	f000 fd81 	bl	800181c <HAL_GetTick>
 8000d1a:	62f8      	str	r0, [r7, #44]	; 0x2c
		while (HAL_GetTick() - start_time < TIEMPO_TOGGLE){};
 8000d1c:	bf00      	nop
 8000d1e:	f000 fd7d 	bl	800181c <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d2c:	d3f7      	bcc.n	8000d1e <FSM_update+0x3d2>



		break;
 8000d2e:	e003      	b.n	8000d38 <FSM_update+0x3ec>
	default:
		estado_actual=DESARMADO_OK;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <FSM_update+0x40c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		break;
 8000d36:	bf00      	nop
	}
}
 8000d38:	bf00      	nop
 8000d3a:	3740      	adds	r7, #64	; 0x40
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	080045b8 	.word	0x080045b8
 8000d44:	080045bc 	.word	0x080045bc
 8000d48:	080045d0 	.word	0x080045d0
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	080045d4 	.word	0x080045d4
 8000d54:	080046f0 	.word	0x080046f0
 8000d58:	20000040 	.word	0x20000040
 8000d5c:	080045f8 	.word	0x080045f8
 8000d60:	080046fc 	.word	0x080046fc
 8000d64:	08004708 	.word	0x08004708

08000d68 <int_to_ascii>:

void int_to_ascii(uint8_t valor,uint8_t *cadena_ascii)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
	if (valor >= 0 && valor <= 9)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b09      	cmp	r3, #9
 8000d78:	d809      	bhi.n	8000d8e <int_to_ascii+0x26>
	{
		cadena_ascii[0] = cero_ascii;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2230      	movs	r2, #48	; 0x30
 8000d7e:	701a      	strb	r2, [r3, #0]
		cadena_ascii[1] = cero_ascii + valor; // Carácter de final de cadena
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	3301      	adds	r3, #1
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	3230      	adds	r2, #48	; 0x30
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	701a      	strb	r2, [r3, #0]
 8000d8c:	e00e      	b.n	8000dac <int_to_ascii+0x44>
	} else if (valor >= decena && valor <= 15)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b09      	cmp	r3, #9
 8000d92:	d90b      	bls.n	8000dac <int_to_ascii+0x44>
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b0f      	cmp	r3, #15
 8000d98:	d808      	bhi.n	8000dac <int_to_ascii+0x44>
	{
		cadena_ascii[0] = '1';
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	2231      	movs	r2, #49	; 0x31
 8000d9e:	701a      	strb	r2, [r3, #0]
	    cadena_ascii[1] = cero_ascii + (valor - decena);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	3226      	adds	r2, #38	; 0x26
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	701a      	strb	r2, [r3, #0]
	}
	cadena_ascii[2]= ' ';
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	3302      	adds	r3, #2
 8000db0:	2220      	movs	r2, #32
 8000db2:	701a      	strb	r2, [r3, #0]
	cadena_ascii[3]= 'S';
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	3303      	adds	r3, #3
 8000db8:	2253      	movs	r2, #83	; 0x53
 8000dba:	701a      	strb	r2, [r3, #0]
	cadena_ascii[4]= 'e';
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	2265      	movs	r2, #101	; 0x65
 8000dc2:	701a      	strb	r2, [r3, #0]
	cadena_ascii[5]= 'c';
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	3305      	adds	r3, #5
 8000dc8:	2263      	movs	r2, #99	; 0x63
 8000dca:	701a      	strb	r2, [r3, #0]
	cadena_ascii[6]= '.';
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3306      	adds	r3, #6
 8000dd0:	222e      	movs	r2, #46	; 0x2e
 8000dd2:	701a      	strb	r2, [r3, #0]
	cadena_ascii[7]= caracter_final;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3307      	adds	r3, #7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]


}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <gpio_i2c_config>:
#include "driver_i2c1.h"

I2C_HandleTypeDef hi2c1_t;
extern UART_HandleTypeDef huart2;
void gpio_i2c_config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef i2c_gpio={0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <gpio_i2c_config+0x58>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <gpio_i2c_config+0x58>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <gpio_i2c_config+0x58>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
	i2c_gpio.Pin=GPIO_PIN_8|GPIO_PIN_9;
 8000e18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e1c:	607b      	str	r3, [r7, #4]
	i2c_gpio.Mode=GPIO_MODE_AF_OD; //Funcion alterna y lo dejamos en OPEN DRAIN,ya que I2C se maneja asi
 8000e1e:	2312      	movs	r3, #18
 8000e20:	60bb      	str	r3, [r7, #8]
	i2c_gpio.Pull=GPIO_NOPULL;//Para poner en pull UP sd y scl usaremos resistencias externas
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
	i2c_gpio.Speed=GPIO_SPEED_FREQ_VERY_HIGH;//Debe ser alta la frecuencia debido a que seran pines de comunicacion
 8000e26:	2303      	movs	r3, #3
 8000e28:	613b      	str	r3, [r7, #16]
	i2c_gpio.Alternate=GPIO_AF4_I2C1;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &i2c_gpio);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <gpio_i2c_config+0x5c>)
 8000e34:	f000 fed2 	bl	8001bdc <HAL_GPIO_Init>

}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <i2c_init>:
bool_t i2c_init(void)
{
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	b091      	sub	sp, #68	; 0x44
 8000e4c:	af0e      	add	r7, sp, #56	; 0x38
	bool_t state_i2c_init=false;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
	gpio_i2c_config();
 8000e52:	f7ff ffc9 	bl	8000de8 <gpio_i2c_config>
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <i2c_init+0xa4>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a23      	ldr	r2, [pc, #140]	; (8000eec <i2c_init+0xa4>)
 8000e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <i2c_init+0xa4>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
	hi2c1_t.Instance = I2C1;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <i2c_init+0xa8>)
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <i2c_init+0xac>)
 8000e76:	601a      	str	r2, [r3, #0]
	hi2c1_t.Init.ClockSpeed = 100000;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <i2c_init+0xa8>)
 8000e7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <i2c_init+0xb0>)
 8000e7c:	605a      	str	r2, [r3, #4]
	hi2c1_t.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <i2c_init+0xa8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
	hi2c1_t.Init.OwnAddress1 = 0;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <i2c_init+0xa8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
	hi2c1_t.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <i2c_init+0xa8>)
 8000e8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e90:	611a      	str	r2, [r3, #16]
	hi2c1_t.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <i2c_init+0xa8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
	hi2c1_t.Init.OwnAddress2 = 0;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <i2c_init+0xa8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
	hi2c1_t.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <i2c_init+0xa8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
	hi2c1_t.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <i2c_init+0xa8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1_t) == HAL_OK)
 8000eaa:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <i2c_init+0xa8>)
 8000eac:	f001 f876 	bl	8001f9c <HAL_I2C_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d114      	bne.n	8000ee0 <i2c_init+0x98>
	{
		state_i2c_init=true;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
		enviar_stringCompleto_uart((uint8_t*)"I2C1 Inicializado...\r\n", huart2);
 8000eba:	4e10      	ldr	r6, [pc, #64]	; (8000efc <i2c_init+0xb4>)
 8000ebc:	466d      	mov	r5, sp
 8000ebe:	f106 040c 	add.w	r4, r6, #12
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ece:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ed2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000eda:	4809      	ldr	r0, [pc, #36]	; (8000f00 <i2c_init+0xb8>)
 8000edc:	f000 fc14 	bl	8001708 <enviar_stringCompleto_uart>

	}
	return state_i2c_init;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	2000004c 	.word	0x2000004c
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	000186a0 	.word	0x000186a0
 8000efc:	200000e8 	.word	0x200000e8
 8000f00:	08004724 	.word	0x08004724

08000f04 <transmit_i2c>:
		  }
	  }
}

void transmit_i2c(I2C_HandleTypeDef hi2c,uint16_t address,uint8_t *pstring)
{
 8000f04:	b084      	sub	sp, #16
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af02      	add	r7, sp, #8
 8000f0c:	f107 0c08 	add.w	ip, r7, #8
 8000f10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(*pstring)
 8000f14:	e00b      	b.n	8000f2e <transmit_i2c+0x2a>
	{
		HAL_I2C_Master_Transmit(&hi2c,address, (uint8_t *)pstring++, one_byte , timeout_transmit );
 8000f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f18:	1c53      	adds	r3, r2, #1
 8000f1a:	663b      	str	r3, [r7, #96]	; 0x60
 8000f1c:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	f107 0008 	add.w	r0, r7, #8
 8000f2a:	f001 f97b 	bl	8002224 <HAL_I2C_Master_Transmit>
	while(*pstring)
 8000f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1ef      	bne.n	8000f16 <transmit_i2c+0x12>

	}
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f40:	b004      	add	sp, #16
 8000f42:	4770      	bx	lr

08000f44 <keypad_init>:
void F2_OFF(void);
void F3_OFF(void);
void F4_OFF(void);
//Funcion que inicia los GPIOs que se utilizaran para el manejo del teclado
void keypad_init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0}; //Creacion de variable tipo estructura para configurar los Gpio's
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE(); //Habilitacion del clock del bus que se conecta al puerto A
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <keypad_init+0xbc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a27      	ldr	r2, [pc, #156]	; (8001000 <keypad_init+0xbc>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <keypad_init+0xbc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE(); //Habilitacion del clock del bus que se conecta al puerto B
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <keypad_init+0xbc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a20      	ldr	r2, [pc, #128]	; (8001000 <keypad_init+0xbc>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <keypad_init+0xbc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE(); //Habilitacion del clock del bus que se conecta al puerto C
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <keypad_init+0xbc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a19      	ldr	r2, [pc, #100]	; (8001000 <keypad_init+0xbc>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <keypad_init+0xbc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

	//Configuracion como salida de los pines correspondientes a las filas
	//FI-Pb4,F2-PB5,F3_PB6,F4_PB7 OUTPUT
	GPIO_InitStruct.Pin = F1_Pin|F2_Pin|F3_Pin|F4_Pin;
 8000fae:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8000fb2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PORT_F, &GPIO_InitStruct);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480f      	ldr	r0, [pc, #60]	; (8001004 <keypad_init+0xc0>)
 8000fc8:	f000 fe08 	bl	8001bdc <HAL_GPIO_Init>
	//Configuracion como entrada de los pines correspondientes a las columnas
	//C1-PA6,C2-PA7,C3-PA8,C4-PA9
	GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8000fcc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000fd0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PORT_C, &GPIO_InitStruct);
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <keypad_init+0xc4>)
 8000fe2:	f000 fdfb 	bl	8001bdc <HAL_GPIO_Init>
	//Iniciar con los GPIOs de las filas en estado low
	F1_OFF();
 8000fe6:	f000 f939 	bl	800125c <F1_OFF>
	F2_OFF();
 8000fea:	f000 f943 	bl	8001274 <F2_OFF>
	F3_OFF();
 8000fee:	f000 f94d 	bl	800128c <F3_OFF>
	F4_OFF();
 8000ff2:	f000 f957 	bl	80012a4 <F4_OFF>
}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40020400 	.word	0x40020400
 8001008:	40020000 	.word	0x40020000

0800100c <keypad_read>:
//Funcion que retorna el caracter que se presiona en uint8_t
uint8_t keypad_read(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter='\0';
 8001016:	2300      	movs	r3, #0
 8001018:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<n_filas;i++)
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	e0cd      	b.n	80011bc <keypad_read+0x1b0>
	{
		if(i==0)//Barrido en fila 1
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d12f      	bne.n	8001086 <keypad_read+0x7a>
		{
			F1_OFF();
 8001026:	f000 f919 	bl	800125c <F1_OFF>
			F2_ON();
 800102a:	f000 f953 	bl	80012d4 <F2_ON>
			F3_ON();
 800102e:	f000 f95d 	bl	80012ec <F3_ON>
			F4_ON();
 8001032:	f000 f967 	bl	8001304 <F4_ON>
			HAL_Delay(scan_time);
 8001036:	2032      	movs	r0, #50	; 0x32
 8001038:	f000 fbfc 	bl	8001834 <HAL_Delay>

			while ( !Read_COL1() ){caracter=letras[0][COL1];}	//caracter 1
 800103c:	e002      	b.n	8001044 <keypad_read+0x38>
 800103e:	4b64      	ldr	r3, [pc, #400]	; (80011d0 <keypad_read+0x1c4>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	71bb      	strb	r3, [r7, #6]
 8001044:	f000 f8c6 	bl	80011d4 <Read_COL1>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f7      	beq.n	800103e <keypad_read+0x32>
			while ( !Read_COL2() ){caracter=letras[0][COL2];}	//caracter 2
 800104e:	e002      	b.n	8001056 <keypad_read+0x4a>
 8001050:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <keypad_read+0x1c4>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	71bb      	strb	r3, [r7, #6]
 8001056:	f000 f8cd 	bl	80011f4 <Read_COL2>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f7      	beq.n	8001050 <keypad_read+0x44>
			while ( !Read_COL3() ){caracter=letras[0][COL3];}	//caracter 3
 8001060:	e002      	b.n	8001068 <keypad_read+0x5c>
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <keypad_read+0x1c4>)
 8001064:	789b      	ldrb	r3, [r3, #2]
 8001066:	71bb      	strb	r3, [r7, #6]
 8001068:	f000 f8d4 	bl	8001214 <Read_COL3>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f7      	beq.n	8001062 <keypad_read+0x56>
			while ( !Read_COL4() ){caracter=letras[0][COL4];}	//caracter A
 8001072:	e002      	b.n	800107a <keypad_read+0x6e>
 8001074:	4b56      	ldr	r3, [pc, #344]	; (80011d0 <keypad_read+0x1c4>)
 8001076:	78db      	ldrb	r3, [r3, #3]
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	f000 f8dd 	bl	8001238 <Read_COL4>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f7      	beq.n	8001074 <keypad_read+0x68>
 8001084:	e097      	b.n	80011b6 <keypad_read+0x1aa>
		}
		else if(i==1)//Barrido en fila 2
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d12f      	bne.n	80010ec <keypad_read+0xe0>
		{
			F2_OFF();
 800108c:	f000 f8f2 	bl	8001274 <F2_OFF>
			F1_ON();
 8001090:	f000 f914 	bl	80012bc <F1_ON>
			F3_ON();
 8001094:	f000 f92a 	bl	80012ec <F3_ON>
			F4_ON();
 8001098:	f000 f934 	bl	8001304 <F4_ON>
			HAL_Delay(scan_time);
 800109c:	2032      	movs	r0, #50	; 0x32
 800109e:	f000 fbc9 	bl	8001834 <HAL_Delay>

			while ( !Read_COL1() ){caracter=letras[1][COL1];}	//caracter 4
 80010a2:	e002      	b.n	80010aa <keypad_read+0x9e>
 80010a4:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <keypad_read+0x1c4>)
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	71bb      	strb	r3, [r7, #6]
 80010aa:	f000 f893 	bl	80011d4 <Read_COL1>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f7      	beq.n	80010a4 <keypad_read+0x98>
			while ( !Read_COL2() ){caracter=letras[1][COL2];}	//caracter 5
 80010b4:	e002      	b.n	80010bc <keypad_read+0xb0>
 80010b6:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <keypad_read+0x1c4>)
 80010b8:	795b      	ldrb	r3, [r3, #5]
 80010ba:	71bb      	strb	r3, [r7, #6]
 80010bc:	f000 f89a 	bl	80011f4 <Read_COL2>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f7      	beq.n	80010b6 <keypad_read+0xaa>
			while ( !Read_COL3() ){caracter=letras[1][COL3];}	//caracter 6
 80010c6:	e002      	b.n	80010ce <keypad_read+0xc2>
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <keypad_read+0x1c4>)
 80010ca:	799b      	ldrb	r3, [r3, #6]
 80010cc:	71bb      	strb	r3, [r7, #6]
 80010ce:	f000 f8a1 	bl	8001214 <Read_COL3>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f7      	beq.n	80010c8 <keypad_read+0xbc>
			while ( !Read_COL4() ){caracter=letras[1][COL4];}	//caracter B
 80010d8:	e002      	b.n	80010e0 <keypad_read+0xd4>
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <keypad_read+0x1c4>)
 80010dc:	79db      	ldrb	r3, [r3, #7]
 80010de:	71bb      	strb	r3, [r7, #6]
 80010e0:	f000 f8aa 	bl	8001238 <Read_COL4>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f7      	beq.n	80010da <keypad_read+0xce>
 80010ea:	e064      	b.n	80011b6 <keypad_read+0x1aa>
			}
		else if(i==2)//Barrido en fila 3
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d12f      	bne.n	8001152 <keypad_read+0x146>
		{
			F3_OFF();
 80010f2:	f000 f8cb 	bl	800128c <F3_OFF>
			F1_ON();
 80010f6:	f000 f8e1 	bl	80012bc <F1_ON>
			F2_ON();
 80010fa:	f000 f8eb 	bl	80012d4 <F2_ON>
			F4_ON();
 80010fe:	f000 f901 	bl	8001304 <F4_ON>
			HAL_Delay(scan_time);
 8001102:	2032      	movs	r0, #50	; 0x32
 8001104:	f000 fb96 	bl	8001834 <HAL_Delay>

			while ( !Read_COL1() ){caracter=letras[2][COL1];}	//caracter 7
 8001108:	e002      	b.n	8001110 <keypad_read+0x104>
 800110a:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <keypad_read+0x1c4>)
 800110c:	7a1b      	ldrb	r3, [r3, #8]
 800110e:	71bb      	strb	r3, [r7, #6]
 8001110:	f000 f860 	bl	80011d4 <Read_COL1>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f7      	beq.n	800110a <keypad_read+0xfe>
			while ( !Read_COL2() ){caracter=letras[2][COL2];}	//caracter 8
 800111a:	e002      	b.n	8001122 <keypad_read+0x116>
 800111c:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <keypad_read+0x1c4>)
 800111e:	7a5b      	ldrb	r3, [r3, #9]
 8001120:	71bb      	strb	r3, [r7, #6]
 8001122:	f000 f867 	bl	80011f4 <Read_COL2>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f7      	beq.n	800111c <keypad_read+0x110>
			while ( !Read_COL3() ){caracter=letras[2][COL3];}	//caracter 9
 800112c:	e002      	b.n	8001134 <keypad_read+0x128>
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <keypad_read+0x1c4>)
 8001130:	7a9b      	ldrb	r3, [r3, #10]
 8001132:	71bb      	strb	r3, [r7, #6]
 8001134:	f000 f86e 	bl	8001214 <Read_COL3>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f7      	beq.n	800112e <keypad_read+0x122>
			while ( !Read_COL4() ){caracter=letras[2][COL4];}	//caracter C
 800113e:	e002      	b.n	8001146 <keypad_read+0x13a>
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <keypad_read+0x1c4>)
 8001142:	7adb      	ldrb	r3, [r3, #11]
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	f000 f877 	bl	8001238 <Read_COL4>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f7      	beq.n	8001140 <keypad_read+0x134>
 8001150:	e031      	b.n	80011b6 <keypad_read+0x1aa>
		}
		else if(i==3)//Barrido en fila 4
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d12e      	bne.n	80011b6 <keypad_read+0x1aa>
		{
			F4_OFF();
 8001158:	f000 f8a4 	bl	80012a4 <F4_OFF>
			F1_ON();
 800115c:	f000 f8ae 	bl	80012bc <F1_ON>
			F2_ON();
 8001160:	f000 f8b8 	bl	80012d4 <F2_ON>
			F3_ON();
 8001164:	f000 f8c2 	bl	80012ec <F3_ON>
			HAL_Delay(scan_time);
 8001168:	2032      	movs	r0, #50	; 0x32
 800116a:	f000 fb63 	bl	8001834 <HAL_Delay>

			while ( !Read_COL1() ){caracter=letras[3][COL1];}	//caracter *
 800116e:	e002      	b.n	8001176 <keypad_read+0x16a>
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <keypad_read+0x1c4>)
 8001172:	7b1b      	ldrb	r3, [r3, #12]
 8001174:	71bb      	strb	r3, [r7, #6]
 8001176:	f000 f82d 	bl	80011d4 <Read_COL1>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f7      	beq.n	8001170 <keypad_read+0x164>
			while ( !Read_COL2() ){caracter=letras[3][COL2];}	//caracter 0
 8001180:	e002      	b.n	8001188 <keypad_read+0x17c>
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <keypad_read+0x1c4>)
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	71bb      	strb	r3, [r7, #6]
 8001188:	f000 f834 	bl	80011f4 <Read_COL2>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f7      	beq.n	8001182 <keypad_read+0x176>
			while ( !Read_COL3() ){caracter=letras[3][COL3];}	//caracter #
 8001192:	e002      	b.n	800119a <keypad_read+0x18e>
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <keypad_read+0x1c4>)
 8001196:	7b9b      	ldrb	r3, [r3, #14]
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	f000 f83b 	bl	8001214 <Read_COL3>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f7      	beq.n	8001194 <keypad_read+0x188>
			while ( !Read_COL4() ){caracter=letras[3][COL4];}	//caracter D
 80011a4:	e002      	b.n	80011ac <keypad_read+0x1a0>
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <keypad_read+0x1c4>)
 80011a8:	7bdb      	ldrb	r3, [r3, #15]
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	f000 f844 	bl	8001238 <Read_COL4>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f7      	beq.n	80011a6 <keypad_read+0x19a>
	for(i=0;i<n_filas;i++)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	3301      	adds	r3, #1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	f67f af2e 	bls.w	8001020 <keypad_read+0x14>
		}
	}
	return caracter;
 80011c4:	79bb      	ldrb	r3, [r7, #6]

}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000000c 	.word	0x2000000c

080011d4 <Read_COL1>:


//Desarrollo funciones de lectura

static uint8_t Read_COL1(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(PORT_C, C1_Pin)) ? 1 : 0;
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <Read_COL1+0x1c>)
 80011dc:	f000 fe92 	bl	8001f04 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40020000 	.word	0x40020000

080011f4 <Read_COL2>:

static uint8_t Read_COL2(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(PORT_C, C2_Pin)) ? 1 : 0;
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <Read_COL2+0x1c>)
 80011fc:	f000 fe82 	bl	8001f04 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf14      	ite	ne
 8001206:	2301      	movne	r3, #1
 8001208:	2300      	moveq	r3, #0
 800120a:	b2db      	uxtb	r3, r3
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40020000 	.word	0x40020000

08001214 <Read_COL3>:

static uint8_t Read_COL3(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(PORT_C, C3_Pin)) ? 1 : 0;
 8001218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <Read_COL3+0x20>)
 800121e:	f000 fe71 	bl	8001f04 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40020000 	.word	0x40020000

08001238 <Read_COL4>:

static uint8_t Read_COL4(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(PORT_C, C4_Pin)) ? 1 : 0;
 800123c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <Read_COL4+0x20>)
 8001242:	f000 fe5f 	bl	8001f04 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40020000 	.word	0x40020000

0800125c <F1_OFF>:

//Desarrollo funciones para apagar o encender una fila o columna
void F1_OFF(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F1_Pin , GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2110      	movs	r1, #16
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <F1_OFF+0x14>)
 8001266:	f000 fe65 	bl	8001f34 <HAL_GPIO_WritePin>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020400 	.word	0x40020400

08001274 <F2_OFF>:

void F2_OFF(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F2_Pin , GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2120      	movs	r1, #32
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <F2_OFF+0x14>)
 800127e:	f000 fe59 	bl	8001f34 <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40020400 	.word	0x40020400

0800128c <F3_OFF>:

void F3_OFF(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F3_Pin , GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <F3_OFF+0x14>)
 8001296:	f000 fe4d 	bl	8001f34 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020400 	.word	0x40020400

080012a4 <F4_OFF>:

void F4_OFF(void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F4_Pin , GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <F4_OFF+0x14>)
 80012b0:	f000 fe40 	bl	8001f34 <HAL_GPIO_WritePin>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020400 	.word	0x40020400

080012bc <F1_ON>:

void F1_ON(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F1_Pin , GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2110      	movs	r1, #16
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <F1_ON+0x14>)
 80012c6:	f000 fe35 	bl	8001f34 <HAL_GPIO_WritePin>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020400 	.word	0x40020400

080012d4 <F2_ON>:

void F2_ON(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F2_Pin , GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2120      	movs	r1, #32
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <F2_ON+0x14>)
 80012de:	f000 fe29 	bl	8001f34 <HAL_GPIO_WritePin>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020400 	.word	0x40020400

080012ec <F3_ON>:

void F3_ON(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F3_Pin , GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <F3_ON+0x14>)
 80012f6:	f000 fe1d 	bl	8001f34 <HAL_GPIO_WritePin>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020400 	.word	0x40020400

08001304 <F4_ON>:

void F4_ON(void){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_F,F4_Pin , GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130e:	4802      	ldr	r0, [pc, #8]	; (8001318 <F4_ON+0x14>)
 8001310:	f000 fe10 	bl	8001f34 <HAL_GPIO_WritePin>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40020400 	.word	0x40020400

0800131c <INIT_LCD>:
#include "driver_lcd.h"

extern I2C_HandleTypeDef hi2c1_t; //Se trae la estructura hi2c1

void INIT_LCD(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	while(!(i2c_init()));
 8001320:	bf00      	nop
 8001322:	f7ff fd91 	bl	8000e48 <i2c_init>
 8001326:	4603      	mov	r3, r0
 8001328:	f083 0301 	eor.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f7      	bne.n	8001322 <INIT_LCD+0x6>
	CMD_lcd(LCD_HOME);
 8001332:	2002      	movs	r0, #2
 8001334:	f000 f816 	bl	8001364 <CMD_lcd>
	CMD_lcd(LCD_4BITS_MODE);
 8001338:	2028      	movs	r0, #40	; 0x28
 800133a:	f000 f813 	bl	8001364 <CMD_lcd>
	CMD_lcd(LCD_ON_CMD);
 800133e:	200c      	movs	r0, #12
 8001340:	f000 f810 	bl	8001364 <CMD_lcd>
	CMD_lcd(LCD_POSITION0);
 8001344:	2080      	movs	r0, #128	; 0x80
 8001346:	f000 f80d 	bl	8001364 <CMD_lcd>
	CMD_lcd(LCD_CLEAR);
 800134a:	2001      	movs	r0, #1
 800134c:	f000 f80a 	bl	8001364 <CMD_lcd>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <CLEAR_LCD>:

void CLEAR_LCD()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	CMD_lcd(LCD_CLEAR);
 8001358:	2001      	movs	r0, #1
 800135a:	f000 f803 	bl	8001364 <CMD_lcd>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <CMD_lcd>:

void CMD_lcd(uint8_t comando)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b099      	sub	sp, #100	; 0x64
 8001368:	af14      	add	r7, sp, #80	; 0x50
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  	uint8_t nibble_alto;
  	uint8_t nibble_bajo;
	uint8_t data_transmit[BYTE_SIZE_T];
	nibble_alto= (comando&NIBBLE_MASK); //Extraer nibble alto
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f023 030f 	bic.w	r3, r3, #15
 8001374:	73fb      	strb	r3, [r7, #15]
	nibble_bajo= ((comando<<BYTE_SIZE_T)&NIBBLE_MASK);//Extraer nibble bajo
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	73bb      	strb	r3, [r7, #14]
	data_transmit[0] = nibble_alto|LCD_ON_CMD;  //en=1, rs=0
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f043 030c 	orr.w	r3, r3, #12
 8001382:	b2db      	uxtb	r3, r3
 8001384:	723b      	strb	r3, [r7, #8]
	data_transmit[1] = nibble_alto|LCD_OFF_CMD;  //en=0, rs=0
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	b2db      	uxtb	r3, r3
 800138e:	727b      	strb	r3, [r7, #9]
	data_transmit[2] = nibble_bajo|LCD_ON_CMD;  //en=1, rs=0
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	f043 030c 	orr.w	r3, r3, #12
 8001396:	b2db      	uxtb	r3, r3
 8001398:	72bb      	strb	r3, [r7, #10]
	data_transmit[3] = nibble_bajo|LCD_OFF_CMD;  //en=0, rs=0
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	72fb      	strb	r3, [r7, #11]
	transmit_i2c(hi2c1_t,SLAVE_ADDRESS_LCD,data_transmit);
 80013a4:	4c0b      	ldr	r4, [pc, #44]	; (80013d4 <CMD_lcd+0x70>)
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	9312      	str	r3, [sp, #72]	; 0x48
 80013ac:	234e      	movs	r3, #78	; 0x4e
 80013ae:	9311      	str	r3, [sp, #68]	; 0x44
 80013b0:	4668      	mov	r0, sp
 80013b2:	f104 0310 	add.w	r3, r4, #16
 80013b6:	2244      	movs	r2, #68	; 0x44
 80013b8:	4619      	mov	r1, r3
 80013ba:	f003 f8cb 	bl	8004554 <memcpy>
 80013be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013c2:	f7ff fd9f 	bl	8000f04 <transmit_i2c>
	HAL_Delay(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 fa34 	bl	8001834 <HAL_Delay>
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	2000004c 	.word	0x2000004c

080013d8 <CHAR_LCD>:
void CHAR_LCD(uint8_t caracter)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b099      	sub	sp, #100	; 0x64
 80013dc:	af14      	add	r7, sp, #80	; 0x50
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  	uint8_t nibble_alto;
  	uint8_t nibble_bajo;
	uint8_t data_transmit[BYTE_SIZE_T];
	nibble_alto= (caracter&NIBBLE_MASK); //Extraer nibble alto
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	73fb      	strb	r3, [r7, #15]
	nibble_bajo= ((caracter<<BYTE_SIZE_T)&NIBBLE_MASK);//Extraer nibble bajo
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	73bb      	strb	r3, [r7, #14]
	data_transmit[0] = nibble_alto|LCD_ON_CHAR;  //en=1, rs=0
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	f043 030d 	orr.w	r3, r3, #13
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	723b      	strb	r3, [r7, #8]
	data_transmit[1] = nibble_alto|LCD_OFF_CHAR;  //en=0, rs=0
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	f043 0309 	orr.w	r3, r3, #9
 8001400:	b2db      	uxtb	r3, r3
 8001402:	727b      	strb	r3, [r7, #9]
	data_transmit[2] = nibble_bajo|LCD_ON_CHAR;  //en=1, rs=0
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	f043 030d 	orr.w	r3, r3, #13
 800140a:	b2db      	uxtb	r3, r3
 800140c:	72bb      	strb	r3, [r7, #10]
	data_transmit[3] = nibble_bajo|LCD_OFF_CHAR;  //en=0, rs=0
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	f043 0309 	orr.w	r3, r3, #9
 8001414:	b2db      	uxtb	r3, r3
 8001416:	72fb      	strb	r3, [r7, #11]
	transmit_i2c(hi2c1_t,SLAVE_ADDRESS_LCD,data_transmit);
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <CHAR_LCD+0x70>)
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	9312      	str	r3, [sp, #72]	; 0x48
 8001420:	234e      	movs	r3, #78	; 0x4e
 8001422:	9311      	str	r3, [sp, #68]	; 0x44
 8001424:	4668      	mov	r0, sp
 8001426:	f104 0310 	add.w	r3, r4, #16
 800142a:	2244      	movs	r2, #68	; 0x44
 800142c:	4619      	mov	r1, r3
 800142e:	f003 f891 	bl	8004554 <memcpy>
 8001432:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001436:	f7ff fd65 	bl	8000f04 <transmit_i2c>
	HAL_Delay(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f000 f9fa 	bl	8001834 <HAL_Delay>

}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	2000004c 	.word	0x2000004c

0800144c <STRING_LCD>:
void STRING_LCD(uint8_t *pstring)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	while (*pstring) CHAR_LCD(*pstring++);
 8001454:	e006      	b.n	8001464 <STRING_LCD+0x18>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ffba 	bl	80013d8 <CHAR_LCD>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f4      	bne.n	8001456 <STRING_LCD+0xa>
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <LCD_XY>:

void LCD_XY(uint8_t x,uint8_t y)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	460a      	mov	r2, r1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	4613      	mov	r3, r2
 8001484:	71bb      	strb	r3, [r7, #6]
	if (x == LCD_LINEA1)
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b80      	cmp	r3, #128	; 0x80
 800148a:	d107      	bne.n	800149c <LCD_XY+0x26>
	{
		CMD_lcd(LCD_LINEA1|y);
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff65 	bl	8001364 <CMD_lcd>
	}
	else if(x == LCD_LINEA2)
	{
		CMD_lcd(LCD_LINEA2|y);
	}
}
 800149a:	e009      	b.n	80014b0 <LCD_XY+0x3a>
	else if(x == LCD_LINEA2)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2bc0      	cmp	r3, #192	; 0xc0
 80014a0:	d106      	bne.n	80014b0 <LCD_XY+0x3a>
		CMD_lcd(LCD_LINEA2|y);
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff5a 	bl	8001364 <CMD_lcd>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <init_sensor>:
static uint8_t frame_header[frame_header_length]={0x55,0xA5,0x0A,0xD3}; //Trama de sincronizacion
static uint8_t rx_buffer[frame_length];
static uint8_t asciiformat[length_cm_ascii];

bool_t init_sensor(void)
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b08f      	sub	sp, #60	; 0x3c
 80014bc:	af0e      	add	r7, sp, #56	; 0x38
	init_status_uart=false;
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <init_sensor+0x84>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	huart4.Instance = UART4;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <init_sensor+0x88>)
 80014c6:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <init_sensor+0x8c>)
 80014c8:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <init_sensor+0x88>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <init_sensor+0x88>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <init_sensor+0x88>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <init_sensor+0x88>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <init_sensor+0x88>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <init_sensor+0x88>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <init_sensor+0x88>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) == HAL_OK)
 80014f6:	4812      	ldr	r0, [pc, #72]	; (8001540 <init_sensor+0x88>)
 80014f8:	f001 ff84 	bl	8003404 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d115      	bne.n	800152e <init_sensor+0x76>
	{
		init_status_uart=true;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <init_sensor+0x84>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
		enviar_stringCompleto_uart((uint8_t*)"Sensor inicializado por UART4...\r\n", huart2);
 8001508:	4e0f      	ldr	r6, [pc, #60]	; (8001548 <init_sensor+0x90>)
 800150a:	466d      	mov	r5, sp
 800150c:	f106 040c 	add.w	r4, r6, #12
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001520:	e885 0003 	stmia.w	r5, {r0, r1}
 8001524:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <init_sensor+0x94>)
 800152a:	f000 f8ed 	bl	8001708 <enviar_stringCompleto_uart>
	}
	return init_status_uart;
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <init_sensor+0x84>)
 8001530:	781b      	ldrb	r3, [r3, #0]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3704      	adds	r7, #4
 8001536:	46bd      	mov	sp, r7
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	bf00      	nop
 800153c:	200000e4 	.word	0x200000e4
 8001540:	200000a0 	.word	0x200000a0
 8001544:	40004c00 	.word	0x40004c00
 8001548:	200000e8 	.word	0x200000e8
 800154c:	0800475c 	.word	0x0800475c

08001550 <sensor_init>:

//Funcion que activa el gpio PA10 para lecturar la presencia
#include "driver_sensor_presencia.h"

void sensor_init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_sensor={0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <sensor_init+0x50>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <sensor_init+0x50>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <sensor_init+0x50>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	683b      	ldr	r3, [r7, #0]
	gpio_sensor.Pin = GPIO_PIN_10;
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	607b      	str	r3, [r7, #4]
	gpio_sensor.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
	gpio_sensor.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &gpio_sensor);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <sensor_init+0x54>)
 8001594:	f000 fb22 	bl	8001bdc <HAL_GPIO_Init>

}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <detectar_presencia>:


//Basicamente devuelve un true cuando se detecta presencia
bool_t detectar_presencia(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	bool_t temp=false;
 80015ae:	2300      	movs	r3, #0
 80015b0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==GPIO_PIN_SET)
 80015b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <detectar_presencia+0x28>)
 80015b8:	f000 fca4 	bl	8001f04 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <detectar_presencia+0x1e>
	{
		temp=true;
 80015c2:	2301      	movs	r3, #1
 80015c4:	71fb      	strb	r3, [r7, #7]
	}
	return temp;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40020000 	.word	0x40020000

080015d4 <alarma_init_gpio>:

void alarma_init_gpio(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Alarma = {0};
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <alarma_init_gpio+0x54>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <alarma_init_gpio+0x54>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <alarma_init_gpio+0x54>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin : PB3 */
	GPIO_Alarma.Pin = GPIO_PIN_3;
 8001604:	2308      	movs	r3, #8
 8001606:	607b      	str	r3, [r7, #4]
	GPIO_Alarma.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
	GPIO_Alarma.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
	GPIO_Alarma.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_Alarma);
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <alarma_init_gpio+0x58>)
 800161a:	f000 fadf 	bl	8001bdc <HAL_GPIO_Init>

}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40020400 	.word	0x40020400

08001630 <alarma_on>:
void alarma_on(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001634:	2108      	movs	r1, #8
 8001636:	4802      	ldr	r0, [pc, #8]	; (8001640 <alarma_on+0x10>)
 8001638:	f000 fc95 	bl	8001f66 <HAL_GPIO_TogglePin>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020400 	.word	0x40020400

08001644 <init_terminal>:
#include "driver_terminal.h"

UART_HandleTypeDef huart2;

bool_t init_terminal(void)
{
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	b091      	sub	sp, #68	; 0x44
 8001648:	af0e      	add	r7, sp, #56	; 0x38
	bool_t state_uart=false;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
	huart2.Instance = USART2;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <init_terminal+0x7c>)
 8001650:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <init_terminal+0x80>)
 8001652:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <init_terminal+0x7c>)
 8001656:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800165a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <init_terminal+0x7c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <init_terminal+0x7c>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <init_terminal+0x7c>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <init_terminal+0x7c>)
 8001670:	220c      	movs	r2, #12
 8001672:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <init_terminal+0x7c>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <init_terminal+0x7c>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) == HAL_OK)
 8001680:	480f      	ldr	r0, [pc, #60]	; (80016c0 <init_terminal+0x7c>)
 8001682:	f001 febf 	bl	8003404 <HAL_UART_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d114      	bne.n	80016b6 <init_terminal+0x72>
	{
		state_uart=true;
 800168c:	2301      	movs	r3, #1
 800168e:	71fb      	strb	r3, [r7, #7]
		enviar_stringCompleto_uart((uint8_t*)"Terminal por UART2 lista...\r\n", huart2);
 8001690:	4e0b      	ldr	r6, [pc, #44]	; (80016c0 <init_terminal+0x7c>)
 8001692:	466d      	mov	r5, sp
 8001694:	f106 040c 	add.w	r4, r6, #12
 8001698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ac:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <init_terminal+0x84>)
 80016b2:	f000 f829 	bl	8001708 <enviar_stringCompleto_uart>
	}
	return state_uart;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c0:	200000e8 	.word	0x200000e8
 80016c4:	40004400 	.word	0x40004400
 80016c8:	08004780 	.word	0x08004780

080016cc <enviar_msg_terminal>:

void enviar_msg_terminal(uint8_t *msg)
{
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	b091      	sub	sp, #68	; 0x44
 80016d0:	af0e      	add	r7, sp, #56	; 0x38
 80016d2:	6078      	str	r0, [r7, #4]
	enviar_stringCompleto_uart(msg, huart2);
 80016d4:	4e0b      	ldr	r6, [pc, #44]	; (8001704 <enviar_msg_terminal+0x38>)
 80016d6:	466d      	mov	r5, sp
 80016d8:	f106 040c 	add.w	r4, r6, #12
 80016dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f807 	bl	8001708 <enviar_stringCompleto_uart>
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001702:	bf00      	nop
 8001704:	200000e8 	.word	0x200000e8

08001708 <enviar_stringCompleto_uart>:
 */
#include "driver_uart.h"


void enviar_stringCompleto_uart(uint8_t *pstring,UART_HandleTypeDef huart)
{
 8001708:	b084      	sub	sp, #16
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	f107 0014 	add.w	r0, r7, #20
 8001716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Envia por la uart string completo
	while(*pstring)
 800171a:	e009      	b.n	8001730 <enviar_stringCompleto_uart+0x28>
	{
		HAL_UART_Transmit(&huart, (const uint8_t *)pstring++,1, HAL_MAX_DELAY);
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	1c4b      	adds	r3, r1, #1
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	f107 0014 	add.w	r0, r7, #20
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	2201      	movs	r2, #1
 800172c:	f001 feb7 	bl	800349e <HAL_UART_Transmit>
	while(*pstring)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f1      	bne.n	800171c <enviar_stringCompleto_uart+0x14>
	}
	HAL_UART_AbortTransmit(&huart);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4618      	mov	r0, r3
 800173e:	f001 ff40 	bl	80035c2 <HAL_UART_AbortTransmit>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800174c:	b004      	add	sp, #16
 800174e:	4770      	bx	lr

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <HAL_Init+0x40>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_Init+0x40>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x40>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f94f 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7fe ff48 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f967 	bl	8001a86 <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f000 f92f 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000020 	.word	0x20000020
 80017f0:	2000001c 	.word	0x2000001c

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000020 	.word	0x20000020
 8001818:	2000012c 	.word	0x2000012c

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000012c 	.word	0x2000012c

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000020 	.word	0x20000020

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	; (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	; (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	; (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff29 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff3e 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff8e 	bl	8001970 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff31 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff feb6 	bl	800181c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d008      	beq.n	8001ad0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e052      	b.n	8001b76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0216 	bic.w	r2, r2, #22
 8001ade:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d103      	bne.n	8001b00 <HAL_DMA_Abort+0x62>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0208 	bic.w	r2, r2, #8
 8001b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b20:	e013      	b.n	8001b4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b22:	f7ff fe7b 	bl	800181c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d90c      	bls.n	8001b4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e015      	b.n	8001b76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e4      	bne.n	8001b22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	223f      	movs	r2, #63	; 0x3f
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d004      	beq.n	8001b9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e00c      	b.n	8001bb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2205      	movs	r2, #5
 8001ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e165      	b.n	8001ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8154 	bne.w	8001ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ae 	beq.w	8001ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <HAL_GPIO_Init+0x308>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	; (8001ef0 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x202>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x21c>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f ae96 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f78:	887a      	ldrh	r2, [r7, #2]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	041a      	lsls	r2, r3, #16
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	400b      	ands	r3, r1
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e12b      	b.n	8002206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fb50 	bl	8000668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002000:	f000 fd0a 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8002004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a81      	ldr	r2, [pc, #516]	; (8002210 <HAL_I2C_Init+0x274>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d807      	bhi.n	8002020 <HAL_I2C_Init+0x84>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a80      	ldr	r2, [pc, #512]	; (8002214 <HAL_I2C_Init+0x278>)
 8002014:	4293      	cmp	r3, r2
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e006      	b.n	800202e <HAL_I2C_Init+0x92>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a7d      	ldr	r2, [pc, #500]	; (8002218 <HAL_I2C_Init+0x27c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	bf94      	ite	ls
 8002028:	2301      	movls	r3, #1
 800202a:	2300      	movhi	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0e7      	b.n	8002206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4a78      	ldr	r2, [pc, #480]	; (800221c <HAL_I2C_Init+0x280>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	0c9b      	lsrs	r3, r3, #18
 8002040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <HAL_I2C_Init+0x274>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d802      	bhi.n	8002070 <HAL_I2C_Init+0xd4>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3301      	adds	r3, #1
 800206e:	e009      	b.n	8002084 <HAL_I2C_Init+0xe8>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	4a69      	ldr	r2, [pc, #420]	; (8002220 <HAL_I2C_Init+0x284>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	3301      	adds	r3, #1
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	430b      	orrs	r3, r1
 800208a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002096:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	495c      	ldr	r1, [pc, #368]	; (8002210 <HAL_I2C_Init+0x274>)
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d819      	bhi.n	80020d8 <HAL_I2C_Init+0x13c>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e59      	subs	r1, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b2:	1c59      	adds	r1, r3, #1
 80020b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020b8:	400b      	ands	r3, r1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_I2C_Init+0x138>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e59      	subs	r1, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d2:	e051      	b.n	8002178 <HAL_I2C_Init+0x1dc>
 80020d4:	2304      	movs	r3, #4
 80020d6:	e04f      	b.n	8002178 <HAL_I2C_Init+0x1dc>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d111      	bne.n	8002104 <HAL_I2C_Init+0x168>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e58      	subs	r0, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	440b      	add	r3, r1
 80020ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e012      	b.n	800212a <HAL_I2C_Init+0x18e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e58      	subs	r0, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	0099      	lsls	r1, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	fbb0 f3f3 	udiv	r3, r0, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Init+0x196>
 800212e:	2301      	movs	r3, #1
 8002130:	e022      	b.n	8002178 <HAL_I2C_Init+0x1dc>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10e      	bne.n	8002158 <HAL_I2C_Init+0x1bc>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1e58      	subs	r0, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	440b      	add	r3, r1
 8002148:	fbb0 f3f3 	udiv	r3, r0, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002156:	e00f      	b.n	8002178 <HAL_I2C_Init+0x1dc>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	0099      	lsls	r1, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	6809      	ldr	r1, [r1, #0]
 800217c:	4313      	orrs	r3, r2
 800217e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6911      	ldr	r1, [r2, #16]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68d2      	ldr	r2, [r2, #12]
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	000186a0 	.word	0x000186a0
 8002214:	001e847f 	.word	0x001e847f
 8002218:	003d08ff 	.word	0x003d08ff
 800221c:	431bde83 	.word	0x431bde83
 8002220:	10624dd3 	.word	0x10624dd3

08002224 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	461a      	mov	r2, r3
 8002230:	460b      	mov	r3, r1
 8002232:	817b      	strh	r3, [r7, #10]
 8002234:	4613      	mov	r3, r2
 8002236:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff faf0 	bl	800181c <HAL_GetTick>
 800223c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	f040 80e0 	bne.w	800240c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2319      	movs	r3, #25
 8002252:	2201      	movs	r2, #1
 8002254:	4970      	ldr	r1, [pc, #448]	; (8002418 <HAL_I2C_Master_Transmit+0x1f4>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f964 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
 8002264:	e0d3      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_I2C_Master_Transmit+0x50>
 8002270:	2302      	movs	r3, #2
 8002272:	e0cc      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d007      	beq.n	800229a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2221      	movs	r2, #33	; 0x21
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2210      	movs	r2, #16
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	893a      	ldrh	r2, [r7, #8]
 80022ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a50      	ldr	r2, [pc, #320]	; (800241c <HAL_I2C_Master_Transmit+0x1f8>)
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022dc:	8979      	ldrh	r1, [r7, #10]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	6a3a      	ldr	r2, [r7, #32]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f89c 	bl	8002420 <I2C_MasterRequestWrite>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e08d      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002308:	e066      	b.n	80023d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	6a39      	ldr	r1, [r7, #32]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f9de 	bl	80026d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00d      	beq.n	8002336 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	2b04      	cmp	r3, #4
 8002320:	d107      	bne.n	8002332 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06b      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b04      	cmp	r3, #4
 8002372:	d11b      	bne.n	80023ac <HAL_I2C_Master_Transmit+0x188>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d017      	beq.n	80023ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	6a39      	ldr	r1, [r7, #32]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f9ce 	bl	8002752 <I2C_WaitOnBTFFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d107      	bne.n	80023d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e01a      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d194      	bne.n	800230a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	00100002 	.word	0x00100002
 800241c:	ffff0000 	.word	0xffff0000

08002420 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	460b      	mov	r3, r1
 800242e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d006      	beq.n	800244a <I2C_MasterRequestWrite+0x2a>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d003      	beq.n	800244a <I2C_MasterRequestWrite+0x2a>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002448:	d108      	bne.n	800245c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e00b      	b.n	8002474 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	2b12      	cmp	r3, #18
 8002462:	d107      	bne.n	8002474 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f84f 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00d      	beq.n	80024a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249a:	d103      	bne.n	80024a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e035      	b.n	8002514 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024b0:	d108      	bne.n	80024c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	e01b      	b.n	80024fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024c4:	897b      	ldrh	r3, [r7, #10]
 80024c6:	11db      	asrs	r3, r3, #7
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0306 	and.w	r3, r3, #6
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f063 030f 	orn	r3, r3, #15
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <I2C_MasterRequestWrite+0xfc>)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f875 	bl	80025d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e010      	b.n	8002514 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <I2C_MasterRequestWrite+0x100>)
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f865 	bl	80025d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	00010008 	.word	0x00010008
 8002520:	00010002 	.word	0x00010002

08002524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002534:	e025      	b.n	8002582 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d021      	beq.n	8002582 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f96d 	bl	800181c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d116      	bne.n	8002582 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0220 	orr.w	r2, r3, #32
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e023      	b.n	80025ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d10d      	bne.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4013      	ands	r3, r2
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	e00c      	b.n	80025c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4013      	ands	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d0b6      	beq.n	8002536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e0:	e051      	b.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f0:	d123      	bne.n	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002600:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800260a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e046      	b.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d021      	beq.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002642:	f7ff f8eb 	bl	800181c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d116      	bne.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f043 0220 	orr.w	r2, r3, #32
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e020      	b.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10c      	bne.n	80026aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e00b      	b.n	80026c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	43da      	mvns	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	4013      	ands	r3, r2
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d18d      	bne.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026dc:	e02d      	b.n	800273a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f878 	bl	80027d4 <I2C_IsAcknowledgeFailed>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e02d      	b.n	800274a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d021      	beq.n	800273a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7ff f891 	bl	800181c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e007      	b.n	800274a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d1ca      	bne.n	80026de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800275e:	e02d      	b.n	80027bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f837 	bl	80027d4 <I2C_IsAcknowledgeFailed>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e02d      	b.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d021      	beq.n	80027bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002778:	f7ff f850 	bl	800181c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	d302      	bcc.n	800278e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d116      	bne.n	80027bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e007      	b.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d1ca      	bne.n	8002760 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d11b      	bne.n	8002824 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0204 	orr.w	r2, r3, #4
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0cc      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b68      	ldr	r3, [pc, #416]	; (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d90c      	bls.n	8002870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b65      	ldr	r3, [pc, #404]	; (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b63      	ldr	r3, [pc, #396]	; (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0b8      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002888:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a58      	ldr	r2, [pc, #352]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a0:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ac:	4b50      	ldr	r3, [pc, #320]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	494d      	ldr	r1, [pc, #308]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d044      	beq.n	8002954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d119      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e07f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d003      	beq.n	80028f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f2:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e06f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e067      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4934      	ldr	r1, [pc, #208]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	4313      	orrs	r3, r2
 8002922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002924:	f7fe ff7a 	bl	800181c <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	e00a      	b.n	8002942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7fe ff76 	bl	800181c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e04f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 020c 	and.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	429a      	cmp	r2, r3
 8002952:	d1eb      	bne.n	800292c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d20c      	bcs.n	800297c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e032      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4916      	ldr	r1, [pc, #88]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	490e      	ldr	r1, [pc, #56]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ba:	f000 f855 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 80029be:	4602      	mov	r2, r0
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	490a      	ldr	r1, [pc, #40]	; (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	5ccb      	ldrb	r3, [r1, r3]
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe feda 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023c00 	.word	0x40023c00
 80029f0:	40023800 	.word	0x40023800
 80029f4:	080047a0 	.word	0x080047a0
 80029f8:	20000000 	.word	0x20000000
 80029fc:	2000001c 	.word	0x2000001c

08002a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000000 	.word	0x20000000

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	080047b0 	.word	0x080047b0

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffdc 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0b5b      	lsrs	r3, r3, #13
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	080047b0 	.word	0x080047b0

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a6c:	b0ae      	sub	sp, #184	; 0xb8
 8002a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a8e:	4bcb      	ldr	r3, [pc, #812]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	f200 8206 	bhi.w	8002ea8 <HAL_RCC_GetSysClockFreq+0x440>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ad9 	.word	0x08002ad9
 8002aa8:	08002ea9 	.word	0x08002ea9
 8002aac:	08002ea9 	.word	0x08002ea9
 8002ab0:	08002ea9 	.word	0x08002ea9
 8002ab4:	08002ae1 	.word	0x08002ae1
 8002ab8:	08002ea9 	.word	0x08002ea9
 8002abc:	08002ea9 	.word	0x08002ea9
 8002ac0:	08002ea9 	.word	0x08002ea9
 8002ac4:	08002ae9 	.word	0x08002ae9
 8002ac8:	08002ea9 	.word	0x08002ea9
 8002acc:	08002ea9 	.word	0x08002ea9
 8002ad0:	08002ea9 	.word	0x08002ea9
 8002ad4:	08002cd9 	.word	0x08002cd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4bb9      	ldr	r3, [pc, #740]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ade:	e1e7      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae0:	4bb8      	ldr	r3, [pc, #736]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ae6:	e1e3      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae8:	4bb4      	ldr	r3, [pc, #720]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af4:	4bb1      	ldr	r3, [pc, #708]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d071      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b00:	4bae      	ldr	r3, [pc, #696]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4621      	mov	r1, r4
 8002b40:	1a51      	subs	r1, r2, r1
 8002b42:	6439      	str	r1, [r7, #64]	; 0x40
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b58:	4649      	mov	r1, r9
 8002b5a:	018b      	lsls	r3, r1, #6
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b62:	4641      	mov	r1, r8
 8002b64:	018a      	lsls	r2, r1, #6
 8002b66:	4641      	mov	r1, r8
 8002b68:	1a51      	subs	r1, r2, r1
 8002b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b80:	4649      	mov	r1, r9
 8002b82:	00cb      	lsls	r3, r1, #3
 8002b84:	4641      	mov	r1, r8
 8002b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	00ca      	lsls	r2, r1, #3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	4622      	mov	r2, r4
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	eb42 0303 	adc.w	r3, r2, r3
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	024b      	lsls	r3, r1, #9
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bba:	4621      	mov	r1, r4
 8002bbc:	024a      	lsls	r2, r1, #9
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bd0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bd4:	f7fd fb20 	bl	8000218 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be2:	e067      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be4:	4b75      	ldr	r3, [pc, #468]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bf0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bfe:	2300      	movs	r3, #0
 8002c00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c06:	4622      	mov	r2, r4
 8002c08:	462b      	mov	r3, r5
 8002c0a:	f04f 0000 	mov.w	r0, #0
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	0159      	lsls	r1, r3, #5
 8002c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c18:	0150      	lsls	r0, r2, #5
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4621      	mov	r1, r4
 8002c20:	1a51      	subs	r1, r2, r1
 8002c22:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c24:	4629      	mov	r1, r5
 8002c26:	eb63 0301 	sbc.w	r3, r3, r1
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c38:	4649      	mov	r1, r9
 8002c3a:	018b      	lsls	r3, r1, #6
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c42:	4641      	mov	r1, r8
 8002c44:	018a      	lsls	r2, r1, #6
 8002c46:	4641      	mov	r1, r8
 8002c48:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c66:	4692      	mov	sl, r2
 8002c68:	469b      	mov	fp, r3
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	eb1a 0303 	adds.w	r3, sl, r3
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	462b      	mov	r3, r5
 8002c74:	eb4b 0303 	adc.w	r3, fp, r3
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c86:	4629      	mov	r1, r5
 8002c88:	028b      	lsls	r3, r1, #10
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c90:	4621      	mov	r1, r4
 8002c92:	028a      	lsls	r2, r1, #10
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	673b      	str	r3, [r7, #112]	; 0x70
 8002ca0:	677a      	str	r2, [r7, #116]	; 0x74
 8002ca2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ca6:	f7fd fab7 	bl	8000218 <__aeabi_uldivmod>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4613      	mov	r3, r2
 8002cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cd6:	e0eb      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd8:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d06b      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d02:	663b      	str	r3, [r7, #96]	; 0x60
 8002d04:	2300      	movs	r3, #0
 8002d06:	667b      	str	r3, [r7, #100]	; 0x64
 8002d08:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	462b      	mov	r3, r5
 8002d10:	f04f 0000 	mov.w	r0, #0
 8002d14:	f04f 0100 	mov.w	r1, #0
 8002d18:	0159      	lsls	r1, r3, #5
 8002d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d1e:	0150      	lsls	r0, r2, #5
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4621      	mov	r1, r4
 8002d26:	1a51      	subs	r1, r2, r1
 8002d28:	61b9      	str	r1, [r7, #24]
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d3e:	4659      	mov	r1, fp
 8002d40:	018b      	lsls	r3, r1, #6
 8002d42:	4651      	mov	r1, sl
 8002d44:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d48:	4651      	mov	r1, sl
 8002d4a:	018a      	lsls	r2, r1, #6
 8002d4c:	4651      	mov	r1, sl
 8002d4e:	ebb2 0801 	subs.w	r8, r2, r1
 8002d52:	4659      	mov	r1, fp
 8002d54:	eb63 0901 	sbc.w	r9, r3, r1
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d6c:	4690      	mov	r8, r2
 8002d6e:	4699      	mov	r9, r3
 8002d70:	4623      	mov	r3, r4
 8002d72:	eb18 0303 	adds.w	r3, r8, r3
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	462b      	mov	r3, r5
 8002d7a:	eb49 0303 	adc.w	r3, r9, r3
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	024b      	lsls	r3, r1, #9
 8002d90:	4621      	mov	r1, r4
 8002d92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d96:	4621      	mov	r1, r4
 8002d98:	024a      	lsls	r2, r1, #9
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002da2:	2200      	movs	r2, #0
 8002da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002da6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002da8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dac:	f7fd fa34 	bl	8000218 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dba:	e065      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x420>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dd8:	653b      	str	r3, [r7, #80]	; 0x50
 8002dda:	2300      	movs	r3, #0
 8002ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8002dde:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002de2:	4642      	mov	r2, r8
 8002de4:	464b      	mov	r3, r9
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	4649      	mov	r1, r9
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e14:	4659      	mov	r1, fp
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1e:	4651      	mov	r1, sl
 8002e20:	018a      	lsls	r2, r1, #6
 8002e22:	4651      	mov	r1, sl
 8002e24:	1a54      	subs	r4, r2, r1
 8002e26:	4659      	mov	r1, fp
 8002e28:	eb63 0501 	sbc.w	r5, r3, r1
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e70:	2200      	movs	r2, #0
 8002e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e74:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e7a:	f7fd f9cd 	bl	8000218 <__aeabi_uldivmod>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4613      	mov	r3, r2
 8002e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0f1b      	lsrs	r3, r3, #28
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ea6:	e003      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	37b8      	adds	r7, #184	; 0xb8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	00f42400 	.word	0x00f42400

08002ec8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e28d      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8083 	beq.w	8002fee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ee8:	4b94      	ldr	r3, [pc, #592]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d019      	beq.n	8002f28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ef4:	4b91      	ldr	r3, [pc, #580]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f00:	4b8e      	ldr	r3, [pc, #568]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0c:	d00c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0e:	4b8b      	ldr	r3, [pc, #556]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d112      	bne.n	8002f40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b88      	ldr	r3, [pc, #544]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	4b84      	ldr	r3, [pc, #528]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05b      	beq.n	8002fec <HAL_RCC_OscConfig+0x124>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d157      	bne.n	8002fec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e25a      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_OscConfig+0x90>
 8002f4a:	4b7c      	ldr	r3, [pc, #496]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7b      	ldr	r2, [pc, #492]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xcc>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0xb4>
 8002f62:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a72      	ldr	r2, [pc, #456]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xcc>
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6b      	ldr	r2, [pc, #428]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fc3e 	bl	800181c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fc3a 	bl	800181c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e21f      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xdc>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fc2a 	bl	800181c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fc26 	bl	800181c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e20b      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x104>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d06f      	beq.n	80030da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ffa:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d017      	beq.n	8003036 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003006:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800300e:	2b08      	cmp	r3, #8
 8003010:	d105      	bne.n	800301e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302a:	4b44      	ldr	r3, [pc, #272]	; (800313c <HAL_RCC_OscConfig+0x274>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x186>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e1d3      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4937      	ldr	r1, [pc, #220]	; (800313c <HAL_RCC_OscConfig+0x274>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e03a      	b.n	80030da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b34      	ldr	r3, [pc, #208]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe fbd3 	bl	800181c <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307a:	f7fe fbcf 	bl	800181c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1b4      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_RCC_OscConfig+0x274>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	4b28      	ldr	r3, [pc, #160]	; (800313c <HAL_RCC_OscConfig+0x274>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4925      	ldr	r1, [pc, #148]	; (800313c <HAL_RCC_OscConfig+0x274>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fbb2 	bl	800181c <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fe fbae 	bl	800181c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e193      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x274>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d036      	beq.n	8003154 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe fb92 	bl	800181c <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fe fb8e 	bl	800181c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e173      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x234>
 800311a:	e01b      	b.n	8003154 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe fb7b 	bl	800181c <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	e00e      	b.n	8003148 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe fb77 	bl	800181c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d907      	bls.n	8003148 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e15c      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
 800313c:	40023800 	.word	0x40023800
 8003140:	42470000 	.word	0x42470000
 8003144:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b8a      	ldr	r3, [pc, #552]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ea      	bne.n	800312a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8097 	beq.w	8003290 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003166:	4b83      	ldr	r3, [pc, #524]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	4b7f      	ldr	r3, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a7e      	ldr	r2, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
 8003182:	4b7c      	ldr	r3, [pc, #496]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b79      	ldr	r3, [pc, #484]	; (8003378 <HAL_RCC_OscConfig+0x4b0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d118      	bne.n	80031d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319e:	4b76      	ldr	r3, [pc, #472]	; (8003378 <HAL_RCC_OscConfig+0x4b0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a75      	ldr	r2, [pc, #468]	; (8003378 <HAL_RCC_OscConfig+0x4b0>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fb37 	bl	800181c <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fe fb33 	bl	800181c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e118      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b6c      	ldr	r3, [pc, #432]	; (8003378 <HAL_RCC_OscConfig+0x4b0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x31e>
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6713      	str	r3, [r2, #112]	; 0x70
 80031e4:	e01c      	b.n	8003220 <HAL_RCC_OscConfig+0x358>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x340>
 80031ee:	4b61      	ldr	r3, [pc, #388]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a60      	ldr	r2, [pc, #384]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
 80031fa:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a5d      	ldr	r2, [pc, #372]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0x358>
 8003208:	4b5a      	ldr	r3, [pc, #360]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a59      	ldr	r2, [pc, #356]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	4b57      	ldr	r3, [pc, #348]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a56      	ldr	r2, [pc, #344]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800321a:	f023 0304 	bic.w	r3, r3, #4
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe faf8 	bl	800181c <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe faf4 	bl	800181c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0d7      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ee      	beq.n	8003230 <HAL_RCC_OscConfig+0x368>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fe fae2 	bl	800181c <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fe fade 	bl	800181c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0c1      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	4b40      	ldr	r3, [pc, #256]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1ee      	bne.n	800325c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d105      	bne.n	8003290 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800328a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80ad 	beq.w	80033f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d060      	beq.n	8003368 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d145      	bne.n	800333a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b33      	ldr	r3, [pc, #204]	; (800337c <HAL_RCC_OscConfig+0x4b4>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fab2 	bl	800181c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fe faae 	bl	800181c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e093      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	019b      	lsls	r3, r3, #6
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	071b      	lsls	r3, r3, #28
 8003306:	491b      	ldr	r1, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_RCC_OscConfig+0x4b4>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe fa83 	bl	800181c <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331a:	f7fe fa7f 	bl	800181c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e064      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x452>
 8003338:	e05c      	b.n	80033f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_RCC_OscConfig+0x4b4>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fa6c 	bl	800181c <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe fa68 	bl	800181c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e04d      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x480>
 8003366:	e045      	b.n	80033f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e040      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000
 800337c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <HAL_RCC_OscConfig+0x538>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d030      	beq.n	80033f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d129      	bne.n	80033f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d122      	bne.n	80033f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d119      	bne.n	80033f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	3b01      	subs	r3, #1
 80033ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d10f      	bne.n	80033f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e03f      	b.n	8003496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fd f964 	bl	80006f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fde3 	bl	8004014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800347c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b08a      	sub	sp, #40	; 0x28
 80034a2:	af02      	add	r7, sp, #8
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d17c      	bne.n	80035b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_UART_Transmit+0x2c>
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e075      	b.n	80035ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit+0x3e>
 80034d8:	2302      	movs	r3, #2
 80034da:	e06e      	b.n	80035ba <HAL_UART_Transmit+0x11c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2221      	movs	r2, #33	; 0x21
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f2:	f7fe f993 	bl	800181c <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350c:	d108      	bne.n	8003520 <HAL_UART_Transmit+0x82>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e003      	b.n	8003528 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003530:	e02a      	b.n	8003588 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fb61 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e036      	b.n	80035ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	3302      	adds	r3, #2
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	e007      	b.n	800357a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3301      	adds	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1cf      	bne.n	8003532 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2200      	movs	r2, #0
 800359a:	2140      	movs	r1, #64	; 0x40
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 fb31 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e006      	b.n	80035ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b08e      	sub	sp, #56	; 0x38
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e5      	bne.n	80035ca <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d136      	bne.n	800367a <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3314      	adds	r3, #20
 8003612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	60bb      	str	r3, [r7, #8]
   return(result);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3314      	adds	r3, #20
 800362a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362c:	61ba      	str	r2, [r7, #24]
 800362e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	613b      	str	r3, [r7, #16]
   return(result);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d018      	beq.n	800367a <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	2200      	movs	r2, #0
 800364e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe fa22 	bl	8001a9e <HAL_DMA_Abort>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00c      	beq.n	800367a <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe faac 	bl	8001bc2 <HAL_DMA_GetError>
 800366a:	4603      	mov	r3, r0
 800366c:	2b20      	cmp	r3, #32
 800366e:	d104      	bne.n	800367a <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2210      	movs	r2, #16
 8003674:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e007      	b.n	800368a <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3738      	adds	r7, #56	; 0x38
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b0ba      	sub	sp, #232	; 0xe8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_UART_IRQHandler+0x66>
 80036e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fbd3 	bl	8003e9e <UART_Receive_IT>
      return;
 80036f8:	e256      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80de 	beq.w	80038c0 <HAL_UART_IRQHandler+0x22c>
 8003704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80d1 	beq.w	80038c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_UART_IRQHandler+0xae>
 800372a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xd2>
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xf6>
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0204 	orr.w	r2, r3, #4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d011      	beq.n	80037ba <HAL_UART_IRQHandler+0x126>
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0208 	orr.w	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 81ed 	beq.w	8003b9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_UART_IRQHandler+0x14e>
 80037d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fb5e 	bl	8003e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_UART_IRQHandler+0x17a>
 8003806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d04f      	beq.n	80038ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa66 	bl	8003ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d141      	bne.n	80038a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3314      	adds	r3, #20
 8003828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800383c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3314      	adds	r3, #20
 800384a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800384e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800385a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1d9      	bne.n	8003822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	2b00      	cmp	r3, #0
 8003874:	d013      	beq.n	800389e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	4a7d      	ldr	r2, [pc, #500]	; (8003a70 <HAL_UART_IRQHandler+0x3dc>)
 800387c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe f97b 	bl	8001b7e <HAL_DMA_Abort_IT>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d016      	beq.n	80038bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003898:	4610      	mov	r0, r2
 800389a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e00e      	b.n	80038bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f99a 	bl	8003bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e00a      	b.n	80038bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f996 	bl	8003bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	e006      	b.n	80038bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f992 	bl	8003bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038ba:	e170      	b.n	8003b9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	bf00      	nop
    return;
 80038be:	e16e      	b.n	8003b9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f040 814a 	bne.w	8003b5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8143 	beq.w	8003b5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 813c 	beq.w	8003b5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	f040 80b4 	bne.w	8003a74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8140 	beq.w	8003ba2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800392a:	429a      	cmp	r2, r3
 800392c:	f080 8139 	bcs.w	8003ba2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003942:	f000 8088 	beq.w	8003a56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800395c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800397e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800398a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1d9      	bne.n	8003946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e1      	bne.n	8003992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3314      	adds	r3, #20
 80039ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e3      	bne.n	80039ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a26:	f023 0310 	bic.w	r3, r3, #16
 8003a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a38:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e3      	bne.n	8003a14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe f824 	bl	8001a9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8c0 	bl	8003bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a6c:	e099      	b.n	8003ba2 <HAL_UART_IRQHandler+0x50e>
 8003a6e:	bf00      	nop
 8003a70:	08003da7 	.word	0x08003da7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 808b 	beq.w	8003ba6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8086 	beq.w	8003ba6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003abe:	647a      	str	r2, [r7, #68]	; 0x44
 8003ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e3      	bne.n	8003a9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003af6:	633a      	str	r2, [r7, #48]	; 0x30
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e3      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0310 	bic.w	r3, r3, #16
 8003b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b3c:	61fa      	str	r2, [r7, #28]
 8003b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	69b9      	ldr	r1, [r7, #24]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	617b      	str	r3, [r7, #20]
   return(result);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e3      	bne.n	8003b18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f848 	bl	8003bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b5c:	e023      	b.n	8003ba6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_UART_IRQHandler+0x4ea>
 8003b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f929 	bl	8003dce <UART_Transmit_IT>
    return;
 8003b7c:	e014      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00e      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x514>
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f969 	bl	8003e6e <UART_EndTransmit_IT>
    return;
 8003b9c:	e004      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
    return;
 8003b9e:	bf00      	nop
 8003ba0:	e002      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ba6:	bf00      	nop
  }
}
 8003ba8:	37e8      	adds	r7, #232	; 0xe8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop

08003bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b090      	sub	sp, #64	; 0x40
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c14:	e050      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d04c      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c24:	f7fd fdfa 	bl	800181c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d241      	bcs.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c54:	637a      	str	r2, [r7, #52]	; 0x34
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e5      	bne.n	8003c34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3314      	adds	r3, #20
 8003c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	613b      	str	r3, [r7, #16]
   return(result);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3314      	adds	r3, #20
 8003c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c88:	623a      	str	r2, [r7, #32]
 8003c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	69f9      	ldr	r1, [r7, #28]
 8003c8e:	6a3a      	ldr	r2, [r7, #32]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e00f      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d09f      	beq.n	8003c16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3740      	adds	r7, #64	; 0x40
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b095      	sub	sp, #84	; 0x54
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d08:	643a      	str	r2, [r7, #64]	; 0x40
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e5      	bne.n	8003ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d119      	bne.n	8003d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d78:	61ba      	str	r2, [r7, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	613b      	str	r3, [r7, #16]
   return(result);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d9a:	bf00      	nop
 8003d9c:	3754      	adds	r7, #84	; 0x54
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7ff ff09 	bl	8003bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b21      	cmp	r3, #33	; 0x21
 8003de0:	d13e      	bne.n	8003e60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	d114      	bne.n	8003e16 <UART_Transmit_IT+0x48>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d110      	bne.n	8003e16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	1c9a      	adds	r2, r3, #2
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	621a      	str	r2, [r3, #32]
 8003e14:	e008      	b.n	8003e28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6211      	str	r1, [r2, #32]
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4619      	mov	r1, r3
 8003e36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fe8e 	bl	8003bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08c      	sub	sp, #48	; 0x30
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b22      	cmp	r3, #34	; 0x22
 8003eb0:	f040 80ab 	bne.w	800400a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d117      	bne.n	8003eee <UART_Receive_IT+0x50>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
 8003eec:	e026      	b.n	8003f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d007      	beq.n	8003f12 <UART_Receive_IT+0x74>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <UART_Receive_IT+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e008      	b.n	8003f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d15a      	bne.n	8004006 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0220 	bic.w	r2, r2, #32
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d135      	bne.n	8003ffc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f023 0310 	bic.w	r3, r3, #16
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	623a      	str	r2, [r7, #32]
 8003fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	69f9      	ldr	r1, [r7, #28]
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e5      	bne.n	8003f96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d10a      	bne.n	8003fee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fdf9 	bl	8003bec <HAL_UARTEx_RxEventCallback>
 8003ffa:	e002      	b.n	8004002 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff fde1 	bl	8003bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e002      	b.n	800400c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3730      	adds	r7, #48	; 0x30
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b0c0      	sub	sp, #256	; 0x100
 800401a:	af00      	add	r7, sp, #0
 800401c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	68d9      	ldr	r1, [r3, #12]
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	ea40 0301 	orr.w	r3, r0, r1
 800403c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	431a      	orrs	r2, r3
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800406c:	f021 010c 	bic.w	r1, r1, #12
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800407a:	430b      	orrs	r3, r1
 800407c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	6999      	ldr	r1, [r3, #24]
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	ea40 0301 	orr.w	r3, r0, r1
 800409a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <UART_SetConfig+0x2cc>)
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d005      	beq.n	80040b4 <UART_SetConfig+0xa0>
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b8d      	ldr	r3, [pc, #564]	; (80042e4 <UART_SetConfig+0x2d0>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d104      	bne.n	80040be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b4:	f7fe fcc4 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 80040b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040bc:	e003      	b.n	80040c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040be:	f7fe fcab 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 80040c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d0:	f040 810c 	bne.w	80042ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	1891      	adds	r1, r2, r2
 80040ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ee:	415b      	adcs	r3, r3
 80040f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040f6:	4621      	mov	r1, r4
 80040f8:	eb12 0801 	adds.w	r8, r2, r1
 80040fc:	4629      	mov	r1, r5
 80040fe:	eb43 0901 	adc.w	r9, r3, r1
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800410e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004116:	4690      	mov	r8, r2
 8004118:	4699      	mov	r9, r3
 800411a:	4623      	mov	r3, r4
 800411c:	eb18 0303 	adds.w	r3, r8, r3
 8004120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004124:	462b      	mov	r3, r5
 8004126:	eb49 0303 	adc.w	r3, r9, r3
 800412a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800413a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800413e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004142:	460b      	mov	r3, r1
 8004144:	18db      	adds	r3, r3, r3
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
 8004148:	4613      	mov	r3, r2
 800414a:	eb42 0303 	adc.w	r3, r2, r3
 800414e:	657b      	str	r3, [r7, #84]	; 0x54
 8004150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004158:	f7fc f85e 	bl	8000218 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004162:	fba3 2302 	umull	r2, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	011c      	lsls	r4, r3, #4
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	64b9      	str	r1, [r7, #72]	; 0x48
 8004184:	415b      	adcs	r3, r3
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800418c:	4641      	mov	r1, r8
 800418e:	eb12 0a01 	adds.w	sl, r2, r1
 8004192:	4649      	mov	r1, r9
 8004194:	eb43 0b01 	adc.w	fp, r3, r1
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ac:	4692      	mov	sl, r2
 80041ae:	469b      	mov	fp, r3
 80041b0:	4643      	mov	r3, r8
 80041b2:	eb1a 0303 	adds.w	r3, sl, r3
 80041b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ba:	464b      	mov	r3, r9
 80041bc:	eb4b 0303 	adc.w	r3, fp, r3
 80041c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041d8:	460b      	mov	r3, r1
 80041da:	18db      	adds	r3, r3, r3
 80041dc:	643b      	str	r3, [r7, #64]	; 0x40
 80041de:	4613      	mov	r3, r2
 80041e0:	eb42 0303 	adc.w	r3, r2, r3
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
 80041e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041ee:	f7fc f813 	bl	8000218 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <UART_SetConfig+0x2d4>)
 80041fa:	fba3 2301 	umull	r2, r3, r3, r1
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2264      	movs	r2, #100	; 0x64
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	1acb      	subs	r3, r1, r3
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004210:	fba3 2302 	umull	r2, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800421c:	441c      	add	r4, r3
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800422c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	63b9      	str	r1, [r7, #56]	; 0x38
 8004238:	415b      	adcs	r3, r3
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004240:	4641      	mov	r1, r8
 8004242:	1851      	adds	r1, r2, r1
 8004244:	6339      	str	r1, [r7, #48]	; 0x30
 8004246:	4649      	mov	r1, r9
 8004248:	414b      	adcs	r3, r1
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004258:	4659      	mov	r1, fp
 800425a:	00cb      	lsls	r3, r1, #3
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004262:	4651      	mov	r1, sl
 8004264:	00ca      	lsls	r2, r1, #3
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	4603      	mov	r3, r0
 800426c:	4642      	mov	r2, r8
 800426e:	189b      	adds	r3, r3, r2
 8004270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004274:	464b      	mov	r3, r9
 8004276:	460a      	mov	r2, r1
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800428c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004294:	460b      	mov	r3, r1
 8004296:	18db      	adds	r3, r3, r3
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
 800429a:	4613      	mov	r3, r2
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042aa:	f7fb ffb5 	bl	8000218 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <UART_SetConfig+0x2d4>)
 80042b4:	fba3 1302 	umull	r1, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	2164      	movs	r1, #100	; 0x64
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	3332      	adds	r3, #50	; 0x32
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <UART_SetConfig+0x2d4>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	f003 0207 	and.w	r2, r3, #7
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4422      	add	r2, r4
 80042da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042dc:	e106      	b.n	80044ec <UART_SetConfig+0x4d8>
 80042de:	bf00      	nop
 80042e0:	40011000 	.word	0x40011000
 80042e4:	40011400 	.word	0x40011400
 80042e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042fe:	4642      	mov	r2, r8
 8004300:	464b      	mov	r3, r9
 8004302:	1891      	adds	r1, r2, r2
 8004304:	6239      	str	r1, [r7, #32]
 8004306:	415b      	adcs	r3, r3
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
 800430a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800430e:	4641      	mov	r1, r8
 8004310:	1854      	adds	r4, r2, r1
 8004312:	4649      	mov	r1, r9
 8004314:	eb43 0501 	adc.w	r5, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	00eb      	lsls	r3, r5, #3
 8004322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4643      	mov	r3, r8
 800432e:	18e3      	adds	r3, r4, r3
 8004330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004334:	464b      	mov	r3, r9
 8004336:	eb45 0303 	adc.w	r3, r5, r3
 800433a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800434a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800435a:	4629      	mov	r1, r5
 800435c:	008b      	lsls	r3, r1, #2
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004364:	4621      	mov	r1, r4
 8004366:	008a      	lsls	r2, r1, #2
 8004368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800436c:	f7fb ff54 	bl	8000218 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4b60      	ldr	r3, [pc, #384]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004376:	fba3 2302 	umull	r2, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	011c      	lsls	r4, r3, #4
 800437e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800438c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	1891      	adds	r1, r2, r2
 8004396:	61b9      	str	r1, [r7, #24]
 8004398:	415b      	adcs	r3, r3
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a0:	4641      	mov	r1, r8
 80043a2:	1851      	adds	r1, r2, r1
 80043a4:	6139      	str	r1, [r7, #16]
 80043a6:	4649      	mov	r1, r9
 80043a8:	414b      	adcs	r3, r1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b8:	4659      	mov	r1, fp
 80043ba:	00cb      	lsls	r3, r1, #3
 80043bc:	4651      	mov	r1, sl
 80043be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c2:	4651      	mov	r1, sl
 80043c4:	00ca      	lsls	r2, r1, #3
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	4642      	mov	r2, r8
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d4:	464b      	mov	r3, r9
 80043d6:	460a      	mov	r2, r1
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043f8:	4649      	mov	r1, r9
 80043fa:	008b      	lsls	r3, r1, #2
 80043fc:	4641      	mov	r1, r8
 80043fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004402:	4641      	mov	r1, r8
 8004404:	008a      	lsls	r2, r1, #2
 8004406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800440a:	f7fb ff05 	bl	8000218 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4611      	mov	r1, r2
 8004414:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004416:	fba3 2301 	umull	r2, r3, r3, r1
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2264      	movs	r2, #100	; 0x64
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	1acb      	subs	r3, r1, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	; 0x32
 8004428:	4a33      	ldr	r2, [pc, #204]	; (80044f8 <UART_SetConfig+0x4e4>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004434:	441c      	add	r4, r3
 8004436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443a:	2200      	movs	r2, #0
 800443c:	673b      	str	r3, [r7, #112]	; 0x70
 800443e:	677a      	str	r2, [r7, #116]	; 0x74
 8004440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	415b      	adcs	r3, r3
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004454:	4641      	mov	r1, r8
 8004456:	1851      	adds	r1, r2, r1
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	4649      	mov	r1, r9
 800445c:	414b      	adcs	r3, r1
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800446c:	4659      	mov	r1, fp
 800446e:	00cb      	lsls	r3, r1, #3
 8004470:	4651      	mov	r1, sl
 8004472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004476:	4651      	mov	r1, sl
 8004478:	00ca      	lsls	r2, r1, #3
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	4603      	mov	r3, r0
 8004480:	4642      	mov	r2, r8
 8004482:	189b      	adds	r3, r3, r2
 8004484:	66bb      	str	r3, [r7, #104]	; 0x68
 8004486:	464b      	mov	r3, r9
 8004488:	460a      	mov	r2, r1
 800448a:	eb42 0303 	adc.w	r3, r2, r3
 800448e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	663b      	str	r3, [r7, #96]	; 0x60
 800449a:	667a      	str	r2, [r7, #100]	; 0x64
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044a8:	4649      	mov	r1, r9
 80044aa:	008b      	lsls	r3, r1, #2
 80044ac:	4641      	mov	r1, r8
 80044ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b2:	4641      	mov	r1, r8
 80044b4:	008a      	lsls	r2, r1, #2
 80044b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ba:	f7fb fead 	bl	8000218 <__aeabi_uldivmod>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <UART_SetConfig+0x4e4>)
 80044c4:	fba3 1302 	umull	r1, r3, r3, r2
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	2164      	movs	r1, #100	; 0x64
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	3332      	adds	r3, #50	; 0x32
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <UART_SetConfig+0x4e4>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4422      	add	r2, r4
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044f2:	46bd      	mov	sp, r7
 80044f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f8:	51eb851f 	.word	0x51eb851f

080044fc <memset>:
 80044fc:	4402      	add	r2, r0
 80044fe:	4603      	mov	r3, r0
 8004500:	4293      	cmp	r3, r2
 8004502:	d100      	bne.n	8004506 <memset+0xa>
 8004504:	4770      	bx	lr
 8004506:	f803 1b01 	strb.w	r1, [r3], #1
 800450a:	e7f9      	b.n	8004500 <memset+0x4>

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	4d0d      	ldr	r5, [pc, #52]	; (8004544 <__libc_init_array+0x38>)
 8004510:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004512:	1b64      	subs	r4, r4, r5
 8004514:	10a4      	asrs	r4, r4, #2
 8004516:	2600      	movs	r6, #0
 8004518:	42a6      	cmp	r6, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	4d0b      	ldr	r5, [pc, #44]	; (800454c <__libc_init_array+0x40>)
 800451e:	4c0c      	ldr	r4, [pc, #48]	; (8004550 <__libc_init_array+0x44>)
 8004520:	f000 f826 	bl	8004570 <_init>
 8004524:	1b64      	subs	r4, r4, r5
 8004526:	10a4      	asrs	r4, r4, #2
 8004528:	2600      	movs	r6, #0
 800452a:	42a6      	cmp	r6, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f855 3b04 	ldr.w	r3, [r5], #4
 8004534:	4798      	blx	r3
 8004536:	3601      	adds	r6, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f855 3b04 	ldr.w	r3, [r5], #4
 800453e:	4798      	blx	r3
 8004540:	3601      	adds	r6, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	080047c0 	.word	0x080047c0
 8004548:	080047c0 	.word	0x080047c0
 800454c:	080047c0 	.word	0x080047c0
 8004550:	080047c4 	.word	0x080047c4

08004554 <memcpy>:
 8004554:	440a      	add	r2, r1
 8004556:	4291      	cmp	r1, r2
 8004558:	f100 33ff 	add.w	r3, r0, #4294967295
 800455c:	d100      	bne.n	8004560 <memcpy+0xc>
 800455e:	4770      	bx	lr
 8004560:	b510      	push	{r4, lr}
 8004562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800456a:	4291      	cmp	r1, r2
 800456c:	d1f9      	bne.n	8004562 <memcpy+0xe>
 800456e:	bd10      	pop	{r4, pc}

08004570 <_init>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr

0800457c <_fini>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr
